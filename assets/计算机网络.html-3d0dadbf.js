import{_ as t,Y as o,Z as d,a2 as a,a1 as r,$ as i,a0 as l,E as n}from"./framework-5e11dbd9.js";const s={},h=r('<h2 id="简述计算机网络七层模型和各自的作用" tabindex="-1"><a class="header-anchor" href="#简述计算机网络七层模型和各自的作用" aria-hidden="true">#</a> 简述计算机网络七层模型和各自的作用？</h2><ul><li><strong>物理层</strong>：透明地传输比特流</li><li><strong>数据链路层</strong>：把网络层传下来的数据封装成帧，并进行差错检测</li><li><strong>网络层</strong>：将传输层传递下来的报文段或数据报封装成分组，并选择路由、分组转发</li><li><strong>传输层</strong>：为主机中进程提供数据传输服务，使用协议为 TCP 和 UDP</li><li><strong>会话层</strong>：建立和管理会话</li><li><strong>表示层</strong>：进行数据处理，如数据格式转换、加密解密、压缩解压等</li><li><strong>应用层</strong>：提供各种服务和应用程序，如电子邮件、文件传输等，使用协议有：HTTP、FTP、SMTP、DNS 等</li></ul><h2 id="http-是哪一层的协议-简述它的作用" tabindex="-1"><a class="header-anchor" href="#http-是哪一层的协议-简述它的作用" aria-hidden="true">#</a> HTTP 是哪一层的协议？简述它的作用？</h2><p>HTTP：</p><ul><li>超文本传输协议，属于应用层，主要用于浏览器和服务器之间的数据通信</li><li>基于 TCP 协议，默认使用 80 端口</li><li>无状态协议，服务端不会保存客户端的任何信息</li></ul><p>HTTP 的作用：</p><ol><li>建立 TCP 连接（3 次握手）</li><li>发送 HTTP 请求，包括请求参数、请求头、请求体</li><li>服务器解析并处理 HTTP 请求</li><li>服务器返回 HTTP 响应结果，包括响应码、响应头、响应体</li><li>关闭 TCP 连接（4 次挥手）</li></ol><h2 id="http-有哪些常见的状态码" tabindex="-1"><a class="header-anchor" href="#http-有哪些常见的状态码" aria-hidden="true">#</a> HTTP 有哪些常见的状态码？</h2><p>HTTP 状态码用来描述 HTTP 请求结果，由 3 个十进制数字组成，主要分为五类：</p><ul><li>1xx（信息类状态码）：请求已被接受，需要继续处理 <ul><li>100 Continue ：通知客户端它的部分请求已经被服务器接收，客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应</li></ul></li><li>2xx（成功状态码）：请求正常处理完毕 <ul><li>200 OK ：请求被成功处理</li><li>201 Created ：请求被成功处理并且在服务端创建了一个新的资源</li><li>202 Accepted ：服务端已经接收到了请求，但未处理完成</li><li>204 No Content ： 服务端已经成功处理了请求，但是没有返回任何内容</li></ul></li><li>3xx（重定向状态码）：需要进一步的操作以完成请求 <ul><li>301 Moved Permanently : 永久性重定向，请求的网址已永久移到新的位置</li><li>302 Found : 临时性重定向，请求的网址临时移到新的位置</li><li>304 Not Modified : 客户端发送了一个带条件的请求，服务器端允许请求访问资源，但是请求未满足条件</li></ul></li><li>4xx（客户端错误状态码）：请求包含语法错误或无法完成请求 <ul><li>400 Bad Request ： 客户端请求的语法错误</li><li>401 Unauthorized ： 请求需要有认证信息</li><li>403 Forbidden ：请求被拒绝</li><li>404 Not Found ：请求的资源不存在</li></ul></li><li>5xx（服务端错误状态码）：服务器在处理请求的过程中发生了错误 <ul><li>500 Internal Server Error ：服务器内部错误（比如抛出异常却没被处理），无法完成请求</li><li>502 Bad Gateway ：作为网关或者代理的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</li><li>503 Service Unavailable : 服务器暂时处于超负载或正在进行停机维护，无法处理请求</li></ul></li></ul><h2 id="tcp-和-udp-协议有什么区别-分别适用于什么场景" tabindex="-1"><a class="header-anchor" href="#tcp-和-udp-协议有什么区别-分别适用于什么场景" aria-hidden="true">#</a> TCP 和 UDP 协议有什么区别，分别适用于什么场景？</h2><p>TCP（传输控制协议）和 UDP（用户数据报协议）是传输层的两种不同传输协议，它们间的区别如下：</p><ul><li>连接方式：TCP 是面向连接的，需要先建立连接才能进行数据传输；UDP 是无连接的，可以直接传输数据</li><li>可靠性：TCP 能提供可靠交付，利用确认、重传、流量控制和拥塞控制等机制来保证数据传输的可靠；UDP 尽最大可能交付，不保证数据传输的可靠性，可能会出现丢包、重复、乱序等问题</li><li>传输效率：由于 TCP 需要进行连接、确认、重传等操作，传输效率上比 UDP 慢</li><li>传输内容：TCP 面向字节流；UDP 面向报文</li><li>通信方式：TCP 只支持点对点通信；UDP 支持一对一、一对多、多对一、多对多的交互通信</li></ul><p>应用场景：</p><ul><li>TCP 适用于对数据传输可靠性要求较高的场景，如文件传输、电子邮件、网页访问等</li><li>UDP 适用于对实时性要求较高的场景，如音视频传输、网络游戏等</li></ul><h2 id="http-协议中-get-和-post-有什么区别-分别适用于什么场景" tabindex="-1"><a class="header-anchor" href="#http-协议中-get-和-post-有什么区别-分别适用于什么场景" aria-hidden="true">#</a> HTTP 协议中 GET 和 POST 有什么区别？分别适用于什么场景？</h2><p>GET 和 POST 都是 HTTP 协议中的请求方法，用来向服务器发送请求并获取响应结果，它们间区别如下：</p><ul><li>参数传递方式不同：GET 请求将参数放到 URL 后面；POST 请求将参数放入请求体中</li><li>数据大小限制不同：GET 请求对数据大小有限制，一般不能超过 2KB；POST 请求无限制</li><li>安全性不同：GET 请求的参数会暴露在 URL 上，容易被截获，因此不适合传输敏感数据；POST 请求的参数是在请求体中，相对安全一些，但也要注意参数加密和防 CSRF 攻击等问题</li></ul><p>适用场景：</p><ul><li>GET 请求：用于获取资源，比如浏览器访问某个页面；也适合用于请求数据量较小，不涉及敏感信息的接口</li><li>POST 请求：用于提交数据，比如表单提交；也适合用于请求数据量较大或者涉及敏感信息的接口</li></ul><h2 id="简述-tcp-三次握手、四次挥手的流程-为什么需要三次握手-为什么需要四次挥手" tabindex="-1"><a class="header-anchor" href="#简述-tcp-三次握手、四次挥手的流程-为什么需要三次握手-为什么需要四次挥手" aria-hidden="true">#</a> 简述 TCP 三次握手、四次挥手的流程？为什么需要三次握手？为什么需要四次挥手？</h2><h3 id="tcp-三次握手-用于建立连接" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手-用于建立连接" aria-hidden="true">#</a> TCP 三次握手：用于建立连接</h3><ol><li><p>客户端向服务器发送 SYN 包</p><p>客户端发送一个 SYN 数据包给服务器，请求建立连接，其中包含一个随机生成的序列号 <code>seq = x</code></p></li><li><p>服务器回复 SYN-ACK 确认</p><p>服务器收到 SYN 包后，如果可以建立连接，就会回复一个 SYN-ACK 数据包，其中会包含一个随机生成的序列号 <code>seq = y</code> 和一个确认序列号 <code>ack = x + 1</code>，表示收到客户端的请求，并准备好接收数据</p></li><li><p>客户端发送 ACK 确认</p><p>客户端收到服务器的 SYN-ACK 后，会发送一个 ACK 数据包给服务器，其中会包含一个确认序列号 <code>ack = y + 1</code>，并且自己的序列号 <code>seq = x + 1</code>，表示确认收到，并准备发送数据</p></li></ol>',23),c=r('<h3 id="为什么需要三次握手" tabindex="-1"><a class="header-anchor" href="#为什么需要三次握手" aria-hidden="true">#</a> 为什么需要三次握手？</h3><p>三次握手<strong>为了客户端和服务端都能够确认对方的身份，并确保数据的发送和接收都正常</strong>。</p><ul><li>防止服务端开启一些无用的连接增加服务端的开销</li><li>防止重复连接造成的连接错误</li></ul><h3 id="tcp-四次挥手-用于释放连接" tabindex="-1"><a class="header-anchor" href="#tcp-四次挥手-用于释放连接" aria-hidden="true">#</a> TCP 四次挥手：用于释放连接</h3><ol><li><p>客户端向服务器发送 FIN</p><p>当客户端不需要数据传输的时候，会向服务器发送一个 FIN 数据包，请求关闭连接</p></li><li><p>服务器回复 ACK 确认</p><p>服务器收到 FIN 包之后回复 ACK 数据包，表示同意关闭连接，但可能还有数据要传输，并不会立即关闭</p></li><li><p>服务器发送 FIN</p><p>当服务器也没有数据要传输的时候，会向发送客户端发送一个 FIN 数据包，表示也准备好关闭连接</p></li><li><p>客户端发送 ACK 确认</p><p>客户端收到 FIN 包之后回复 ACK 数据包，表示收到关闭请求，此时客户端处于 <code>TIME-WAIT</code> 状态，等待 2MSL（最大报文存活时间）后，若没有收到数据则说明服务端已关闭，自己也可以关闭连接了</p></li></ol>',5),p=i("h3",{id:"为什么需要四次挥手",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#为什么需要四次挥手","aria-hidden":"true"},"#"),l(" 为什么需要四次挥手？")],-1),T=i("p",null,[l("四次挥手"),i("strong",null,"为了确保数据都能传输完成并正常关闭连接"),l("。任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，再发出连接释放通知，对方确认后就完全关闭了 TCP 连接。")],-1);function u(P,C){const e=n("Mermaid");return o(),d("div",null,[h,a(e,{id:"mermaid-329",code:"eJwrTi0sTc1LTnXJTEwvSszl8ssvSVXISU0rUchPU3DOyUzNK7FSeNo/8WVDo0JwpJ/Cs6kbnvWue9rTygWR1LWzC04tKkstsgJJ2xrqKABNtK2AmFOUmZ4BNgim5OnseU+X9IJU6jo6eys8X7juxbolXBBZBaBRcBuhZgEVwYys1FFITM62rdA2xOtGJGPhDoRbj2Qc0ByIgZUwA/NBboDo0YHreLF/9ouFPRBPP9mz4MW+yVxcAB2IdjM="}),c,a(e,{id:"mermaid-385",code:"eJwrTi0sTc1LTnXJTEwvSszl8ssvSVXISU0rUchPU3DOyUzNK7FSeNo/8WVDo4Kbpx8XREhB185OITi1qCy1yAokbGuoowA0ybYUor8oMz0DbABMydPZ854u6VVwdPZWeL5w3Yt1S7ggMmBzYLYAZWHmlOkoJCZn25ZqG+Iw8Nn0Bc+mbnjWu+7JngUv9k1+Nn0bkhuxmA11I5IV5WhWYPgZw8lYvI5kHtAgiInlOB39Yv/sp61LFZx9/INdXRSed2171tCIbCrM6udrO5/ua1Uw8g32UXg6oQ/k120dzxrXP+2Y+bR188vpa7kAAQ+rGA=="}),p,T])}const g=t(s,[["render",u],["__file","计算机网络.html.vue"]]);export{g as default};
