import{_ as l,Y as i,Z as p,a1 as e}from"./framework-5e11dbd9.js";const a={},r=e('<h2 id="设计模式是什么-为什么要学习和使用设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式是什么-为什么要学习和使用设计模式" aria-hidden="true">#</a> 设计模式是什么？为什么要学习和使用设计模式？</h2><p>设计模式（Design Pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><p>根据它们的用途，设计模式可分为创建型，结构型和行为型三种。</p><ul><li>创建型模式：主要用于描述如何创建对象</li><li>结构型模式：主要用于描述如何实现类或对象的组合</li><li>行为型模式：主要用于描述类或对象怎样交互以及怎样分配职责</li></ul><p>使用设计模式是为了<strong>可重用代码</strong>、<strong>让代码更容易被他人理解</strong>并且<strong>保证代码可靠性</strong>。</p><h2 id="什么是单例模式-使用单例模式有什么好处-有哪些常用的单例模式实现方式-各自的应用场景是什么-请你举例说明哪些地方用到了单例模式" tabindex="-1"><a class="header-anchor" href="#什么是单例模式-使用单例模式有什么好处-有哪些常用的单例模式实现方式-各自的应用场景是什么-请你举例说明哪些地方用到了单例模式" aria-hidden="true">#</a> 什么是单例模式？使用单例模式有什么好处？有哪些常用的单例模式实现方式？各自的应用场景是什么？请你举例说明哪些地方用到了单例模式？</h2><p>单例模式是一种创建型设计模式，用来保证一个类只有一个实例，并提供一个全局访问点来访问该实例。</p><p>使用单例模式的好处：</p><ul><li>可以节省系统资源，因为每次创建对象都需要消耗一定的资源和时间</li><li>确保某些类只有一个实例对象的存在，避免对同一资源的多重占用，还能方便全局访问和共享数据</li></ul><p>常见的单例模式实现方式有：</p><ul><li>懒汉式单例模式：延迟加载，第一次使用时才创建实例，线程不安全</li><li>饿汉式单例模式：类加载时就创建实例，线程安全，但不支持延迟加载</li><li>双重检查锁：在懒汉式的基础上加上同步锁，保证了线程安全</li><li>静态内部类：在单例类中增加一个静态内部类，第一次使用时才加载内部类来创建实例对象，利用 JVM 来保证其线程安全性，并确保只初始化一次</li><li>枚举方式：利用枚举特性，确保只有一个实例化，不仅能够避免线程同步的问题，还自动支持序列化机制，防止反序列化重新生成对象</li></ul><p>单例模式的应用场景：</p><ul><li>系统只需要一个实例对象，比如提供一个唯一的序列号生成器、日志记录器等</li><li>创建对象资源消耗过大并只允许创建一个对象，比如线程池、数据库连接池</li></ul><h2 id="设计模式可以分为哪几类-一共有多少种主流的设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式可以分为哪几类-一共有多少种主流的设计模式" aria-hidden="true">#</a> 设计模式可以分为哪几类？一共有多少种主流的设计模式？</h2><p>设计模式可以分为三类，有 23 种主流的设计模式：</p><ul><li><p>创建型模式：涉及对象的创建过程</p><p>单例模式、简单工厂模式、工厂方法模式、抽象工厂模式、建造者模式、原型模式</p></li><li><p>结构型模式：涉及类与对象的组合</p><p>适配器模式、桥接模式、组合模式、装饰器模式、外观模式、享元模式、代理模式</p></li><li><p>行为型模式：涉及对象间的交互和职责分配</p><p>责任链模式、命令模式、解释器模式、迭代器模式、中介者模式、备忘录模式、观察者模式、状态模式、策略模式、模板方法模式</p></li></ul><h2 id="什么是工厂模式-使用工厂模式有什么好处-工厂模式有哪些分类-各自的应用场景是什么" tabindex="-1"><a class="header-anchor" href="#什么是工厂模式-使用工厂模式有什么好处-工厂模式有哪些分类-各自的应用场景是什么" aria-hidden="true">#</a> 什么是工厂模式？使用工厂模式有什么好处？工厂模式有哪些分类？各自的应用场景是什么？</h2><p>工厂模式是一种创建型设计模式，通过一个工厂方法来创建对象，而不是直接使用 new 关键字来实例化对象。通常这个工厂方法是静态的，并可以通过参数决定返回对象的类型。</p><p>工厂模式的好处：</p><ul><li>将对象的创建和使用分离，使代码更加灵活，易于维护和扩展</li><li>隐藏对象的创建细节，让客户端无需关注对象的创建过程，只知道如何使用即可</li><li>避免重复创建相同的对象，提供系统性能</li></ul><p>工厂模式包括：</p><ul><li><p>简单工厂模式：定义一个工厂类，根据所传的参数决定创建哪个实例</p><p>适用场景：适用于需要根据不同条件创建不同实例的场景，并且工厂类负责创建的对象较少</p></li><li><p>工厂方法模式：定义一个创建对象的接口，由子类来决定要实例化哪个，即将实例化推迟到子类进行</p><p>适用场景：适用于需要根据具体的业务需求来创建不同类型的对象</p></li><li><p>抽象工厂模式：提供一个接口，用于创建一系列相关或相互依赖对象，而无需指定它们具体的类</p><p>适用场景：适用于需要创建一组相关或依赖对象的场景</p></li></ul>',22),t=[r];function n(h,s){return i(),p("div",null,t)}const o=l(a,[["render",n],["__file","设计模式.html.vue"]]);export{o as default};
