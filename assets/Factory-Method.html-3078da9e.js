import{_ as D,Y as r,Z as t,a2 as i,a3 as a,a1 as l,E as y,$ as s,a0 as n}from"./framework-5e11dbd9.js";const d="/assets/Factory-Method-3cee4630.png",C={},u=l('<h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>工厂方法模式（Factory Method），定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法让一个类的实例化延迟到其子类。</p><h3 id="结构图" tabindex="-1"><a class="header-anchor" href="#结构图" aria-hidden="true">#</a> 结构图</h3><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Product：定义工厂方法所创建对象的接口</li><li>Factory：声明工厂方法，该方法返回一个 Product 类型的对象</li><li>ConcreteProduct：具体的产品，实现 Product 接口</li><li>ConcreteFactory：重写工厂方法以返回具体实例</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><blockquote><p>需求：在前面的计算器程序中，已经使用一个工厂来创建加减乘除类。现在想增加新的运算类（指数、对数运算类），但不能影响原有的基础运算类的运作。</p><p>分析：可以抽象一个工厂接口，将加减乘除类用一个基础工厂来创建；再增加一个新的工厂类，用来创建高级运算类，这样就可以不影响原有代码和运作。</p></blockquote><p>工厂接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IFactory</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    /**</span></span>
<span class="line"><span style="color:#6A9955;">     * 创建运算类</span></span>
<span class="line"><span style="color:#6A9955;">     * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">operate</span><span style="color:#6A9955;"> 运算符</span></span>
<span class="line"><span style="color:#6A9955;">     * </span><span style="color:#569CD6;">@return</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">Operation</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">createOperation</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">operate</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基础运算工厂</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">BasicFactory</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IFactory</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Operation</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">createOperation</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">operate</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Operation</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">operation</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> (operate) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;+&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                operation = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Add</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;-&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                operation = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Sub</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;*&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                operation = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Mul</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                operation = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Div</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">default:</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> operation;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增加两个运输类</p>`,12),v=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Pow"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"extends"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Operation"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    @"),s("span",{style:{color:"#4EC9B0"}},"Override")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"double"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"getResult"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"double"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"numberA"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"double"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"numberB"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"pow"),s("span",{style:{color:"#D4D4D4"}},"(numberA, numberB);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),b=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Log"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"extends"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Operation"),s("span",{style:{color:"#D4D4D4"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    @"),s("span",{style:{color:"#4EC9B0"}},"Override")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"double"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"getResult"),s("span",{style:{color:"#D4D4D4"}},"("),s("span",{style:{color:"#4EC9B0"}},"double"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"numberA"),s("span",{style:{color:"#D4D4D4"}},", "),s("span",{style:{color:"#4EC9B0"}},"double"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"numberB"),s("span",{style:{color:"#D4D4D4"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"log"),s("span",{style:{color:"#D4D4D4"}},"(numberA) / "),s("span",{style:{color:"#9CDCFE"}},"Math"),s("span",{style:{color:"#D4D4D4"}},"."),s("span",{style:{color:"#DCDCAA"}},"log"),s("span",{style:{color:"#D4D4D4"}},"(numberB);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),m=l(`<p>高级运算工厂</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AdvancedFactory</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">implements</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IFactory</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    @</span><span style="color:#4EC9B0;">Override</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Operation</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">createOperation</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">operate</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Operation</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">operation</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> (operate) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;pow&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                operation = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Pow</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;log&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                operation = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Log</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">default:</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> operation;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 OperationFactory 类，用来选择对应工厂并创建运算类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">OperationFactory</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Operation</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">createOperation</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">operate</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">Operation</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">operation</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#4EC9B0;">IFactory</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">factory</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">switch</span><span style="color:#D4D4D4;"> (operate) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;+&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;-&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;*&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                factory = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">BasicFactory</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;pow&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">case</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;log&quot;</span><span style="color:#C586C0;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                factory = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">AdvancedFactory</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">break</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">default:</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (factory != </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            operation = </span><span style="color:#9CDCFE;">factory</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">createOperation</span><span style="color:#D4D4D4;">(operate);</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> operation;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，新的 OperationFactory 类已经不存在运算子类实例化的代码，全部是接口和具体工厂类，并不存在具体实现，即实例化的过程延迟到了工厂子类中。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ul><li>工厂方法模式是简单工厂模式的进一步抽象和推广，它保持了简单工厂模式封装对象创建过程的优点，而且克服了违背开闭原则的缺点</li><li>工厂方法模式本质就是对获取对象过程的抽象。一方面，对于复杂的参数的构造对象，可以很好地对外层屏蔽代码的复杂性；同时，有很好的解耦能力，由于是针对接口编程，当我们要修改具体实现类的代码时，上层代码不需要了解具体实现的情况，因此不会影响到上层代码的调用，这就达到了解耦的目的。</li></ul>`,7);function E(h,A){const o=y("CodeTabs");return r(),t("div",null,[u,i(o,{id:"56",data:[{title:"指数运算类"},{title:"对数运算类"}],"tab-id":"shell"},{tab0:a(({title:e,value:p,isActive:c})=>[v]),tab1:a(({title:e,value:p,isActive:c})=>[b]),_:1}),m])}const g=D(C,[["render",E],["__file","Factory-Method.html.vue"]]);export{g as default};
