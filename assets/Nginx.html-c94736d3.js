import{_ as c,Y as p,Z as r,a2 as s,$ as n,a0 as e,a1 as o,E as i}from"./framework-5e11dbd9.js";const d={},t=o('<h2 id="ngnix-是什么-它有哪些应用场景" tabindex="-1"><a class="header-anchor" href="#ngnix-是什么-它有哪些应用场景" aria-hidden="true">#</a> Ngnix 是什么？它有哪些应用场景？</h2><p>Nginx 是一款轻量级的 Web 服务器、反向代理服务器以及电子邮件代理服务器。应用场景包括：</p><ul><li>静态资源服务：由于 Nginx 的高性能，可以作为静态资源服务器，静态资源包括图片、HTML 等</li><li>反向代理和负载均衡：Nginx 可作为反向代理服务器，将请求转发到多台服务器上。同时支持负载均衡，可以平均分担负载，提高系统的可用性和性能</li><li>Web 服务器：Nginx 可以提供 Web 服务，并实现动静分离</li><li>邮件代理服务器：Nginx支持 IMAP、POP3、SMTP 协议，可以提供邮件代理服务</li></ul><h2 id="什么是正向代理和反向代理-如何使用-nginx-做反向代理" tabindex="-1"><a class="header-anchor" href="#什么是正向代理和反向代理-如何使用-nginx-做反向代理" aria-hidden="true">#</a> 什么是正向代理和反向代理，如何使用 Nginx 做反向代理？</h2><p>正向代理：客户端向代理服务器发送一个请求并指定目标，由代理服务器向目标服务器发起请求，并将响应结果返回给客户端。<strong>代理的对象是客户端</strong></p>',5),D=n("p",null,"使用场景：",-1),m=n("ul",null,[n("li",null,"突破访问限制：正向代理可以访问受限制的资源，例如被墙的网站和内网资源等"),n("li",null,"提高访问速度：正向代理能够缓存数据，当客户端请求相同资源时，能直接从缓冲区获取并返回，提高访问速度"),n("li",null,"隐藏客户端信息：正向代理能够隐藏客户端的真实 IP 和其他信息，保护客户端的隐私"),n("li",null,"网络爬虫：通过设置代理服务器，爬取目标网站的数据")],-1),u=n("p",null,[e("反向代理：客户端发起请求到代理服务器，代理服务器将请求转发到内部服务器，获取到服务器的响应并返回给客户端。"),n("strong",null,"代理的对象是服务器")],-1),v=o(`<p>使用场景：</p><ul><li>负载均衡：反向代理可以将客户端的请求分发到多台服务器上，实现负载均衡</li><li>缓存加速：反向代理通过缓存服务器上的静态资源，例如页面、图片和文件等，加速网站的访问速度</li><li>安全防护：反向代理可以在客户端和服务器之间进行安全过滤，如过滤恶意攻击、限制外部访问等，保护服务器的安全</li></ul><p>使用 Nginx 做反向代理：</p><ol><li>安装 Nginx 服务器</li><li>修改 <code>nginx.conf</code> 配置文件</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">http {</span></span>
<span class="line"><span style="color:#D4D4D4;">    server {</span></span>
<span class="line"><span style="color:#D4D4D4;">        listen 80;</span></span>
<span class="line"><span style="color:#D4D4D4;">        server_name  localhost;	</span></span>
<span class="line"><span style="color:#D4D4D4;">        location / {</span></span>
<span class="line"><span style="color:#D4D4D4;">            proxy_pass http://backend;		</span></span>
<span class="line"><span style="color:#D4D4D4;">            proxy_set_header Host $host;</span></span>
<span class="line"><span style="color:#D4D4D4;">            proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span style="color:#D4D4D4;">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    # 实现负载均衡</span></span>
<span class="line"><span style="color:#D4D4D4;">    upstream backend {</span></span>
<span class="line"><span style="color:#D4D4D4;">        server 127.0.0.1:8081;</span></span>
<span class="line"><span style="color:#D4D4D4;">        server 127.0.0.1:8082;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>listen</code> ：指定监听端口</li><li><code>server_name</code>：指定监听地址</li><li><code>location</code>：指定请求的路径</li><li><code>proxy_pass</code> ：指定目标服务器</li><li><code>proxy_set_header</code> ：指定传递给目标服务器的请求头信息，比如 <code>Host</code>，<code>X-Real-IP</code>，<code>X-Forwarded-For</code> 等，用来获取客户端的真实 IP</li></ul><ol start="3"><li>重启 Nginx 服务</li></ol><p>在上面的例子中，当客户端访问 <code>http://localhost/</code>（没加端口时默认是 80 端口），会采用轮询的机制将请求转发到 <code>127.0.0.1:8081</code> 和 <code>127.0.0.1:8082</code> 上，然后将结果返回给客户端</p><h2 id="如何用-nginx-做限流-有几种限流算法-分别如何实现" tabindex="-1"><a class="header-anchor" href="#如何用-nginx-做限流-有几种限流算法-分别如何实现" aria-hidden="true">#</a> 如何用 Nginx 做限流，有几种限流算法，分别如何实现？</h2><p>常见的限流算法有：</p><ul><li>漏桶算法：漏桶算法是一种固定窗口限流算法，它会对请求进行平滑处理，保证在任何时间段内的请求速率都不会超过设置的阈值</li><li>令牌桶算法：令牌桶算法也是一种固定窗口限流算法，它将请求处理视作从令牌桶中获取令牌的过程，当令牌桶中没有足够的令牌时，则会被拒绝</li><li>计数器算法：通过对请求的计数进行限制来控制流量。对于每个请求，将其计数器加 1，并与预设的阈值进行比较，如果计数器超过阈值，则拒绝该请求</li></ul><p>Nginx 限流方式主要有两种：限制访问频率、限制并发连接数</p><ol><li>限制访问频率</li></ol><p>Nginx中使用 <code>ngx_http_limit_req_module</code> 模块来限制请求的访问频率，基于漏桶算法原理实现</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">http {</span></span>
<span class="line"><span style="color:#D4D4D4;">    limit_req_zone $binary_remote_addr zone=myLimit:10m rate=10r/s;</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">    server {</span></span>
<span class="line"><span style="color:#D4D4D4;">        # ...</span></span>
<span class="line"><span style="color:#D4D4D4;">        location / {</span></span>
<span class="line"><span style="color:#D4D4D4;">            limit_req zone=myLimit burst=5;</span></span>
<span class="line"><span style="color:#D4D4D4;">            # ...</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>limit_req_zone</code> 用来定义限流区域和速率，语法为 <code>limit_req_zone key zone=name:size rate=speed</code></p><ul><li>key：定义限流对象，<code>$binary_remote_addr</code> 表示使用访问者的 IP 地址来标识限流区域</li><li>zone：定义用于存储每个 IP 地址状态以及被限制请求 URL 访问频率的共享内存区域，<code>myLimit:10m</code> 表示一个大小为 10M，名称为 myLimit 的内存区域，16000 个 IP 地址状态信息大约需要 1MB</li><li>rate：设置最大访问数，<code>rate=10r/s</code> 表示每秒最多处理 10 个请求。Nginx 中以毫秒为粒度来跟踪请求，所以速度限制相当于每 100 毫秒处理 1 个请求</li></ul><p>在 location 中，使用 <code>limit_req</code> 来应用此限流策略。语法为 <code>limit_req zone=name [burst=number] [nodelay]</code></p><ul><li><p>zone：应用哪个限流区域</p></li><li><p>burst：定义了当超出 zone 指定速率时，客户端还能发起多少请求</p><ul><li>若没设置 <code>burst</code> 值意味着在前一个请求后 100 毫秒内的请求都会被拒绝</li><li>设置以后前一个请求后 100 毫秒内到达的请求会放在一个队列中，队列大小就是设定的值，当超过队列大小才会返回 503</li></ul></li><li><p>nodelay：当设置了 burst 值之后，由于是排队（匀速）执行，延迟会大大增加，可以设置该值来解决</p><ul><li><code>nodelay</code>：没有延迟，在队列里直接执行，需要同时处理漏出来的和队列里的请求</li><li><code>delay=n</code>：精确设置同一时刻要同时处理 n 个请求，队列中第 n+1 个请求开始延时</li></ul></li></ul><ol start="2"><li>限制并发连接数</li></ol><p>Nginx 中使用 <code>ngx_http_limit_conn_module</code> 模块来实现对资源连接数进行限制</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">http {</span></span>
<span class="line"><span style="color:#D4D4D4;">    limit_conn_zone $binary_remote_addr zone=ipLimit:10m;</span></span>
<span class="line"><span style="color:#D4D4D4;">    limit_conn_zone $server_name zone=servLimit:10m;</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">    server {</span></span>
<span class="line"><span style="color:#D4D4D4;">        # ...</span></span>
<span class="line"><span style="color:#D4D4D4;">        location / {</span></span>
<span class="line"><span style="color:#D4D4D4;">            limit_conn ipLimit 20;</span></span>
<span class="line"><span style="color:#D4D4D4;">            limit_conn servLimit 100;</span></span>
<span class="line"><span style="color:#D4D4D4;">            # ...</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>limit_conn_zone</code> 用来配置限流 KEY、及存放 KEY 对应信息的共享内存区域大小，语法为 <code>limit_conn_zone key zone=name:size</code></p><ul><li>key：限流 KEY <ul><li>$binary_remote_addr：IP 地址</li><li>$server_name：域名</li></ul></li></ul><p><code>limit_conn</code> 应用共享内存区域和指定 KEY 的最大连接数，语法为 <code>limit_conn zone number</code></p>`,25),_={href:"https://cloud.tencent.com/developer/news/405550",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.webzuan.cn/szk/9337.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.cnblogs.com/dw3306/p/14655935.html",target:"_blank",rel:"noopener noreferrer"};function h(x,g){const a=i("Mermaid"),l=i("ExternalLinkIcon");return p(),r("div",null,[t,s(a,{id:"mermaid-34",code:"eJxLL0osyFDwCeIqLk2CsJ+tXfx0wsQnuxc/n9DGlZyTmZpXYqigq2unEFCUX1EJFTHCEDFGEknNS+ECs8BixalFZalFXAC+FybX"}),D,m,u,s(a,{id:"mermaid-63",code:"eJxLL0osyFDwCeJKzslMzStR0NW1Uwgoyq+o5CouTYJIPu3vfTph4pPdi59PaOMCy4FVFacWlaUWGWKIGGGIGHOl5qVwAQBtlybS"}),v,n("blockquote",null,[n("p",null,[n("a",_,[e("https://cloud.tencent.com/developer/news/405550"),s(l)])]),n("p",null,[n("a",b,[e("http://www.webzuan.cn/szk/9337.html"),s(l)])]),n("p",null,[n("a",y,[e("https://www.cnblogs.com/dw3306/p/14655935.html"),s(l)])])])])}const w=c(d,[["render",h],["__file","Nginx.html.vue"]]);export{w as default};
