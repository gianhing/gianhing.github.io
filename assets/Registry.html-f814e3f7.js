import{_ as r,Y as t,Z as D,a2 as i,a3 as n,a1 as p,E as y,$ as s,a0 as l}from"./framework-5e11dbd9.js";const d="/assets/Registry-23982edc.png",u={},C=p('<h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>注册器模式（Registry），是一种创建对象的设计模式（不属于 GoF 23 种设计模式），它<strong>将所有需要使用的对象都注册到一个中央注册器中，并提供统一的接口来访问这些对象</strong>。注册器模式可以提高系统的灵活性和可扩展性，同时也便于进行统一的配置和管理。</p><h3 id="结构图" tabindex="-1"><a class="header-anchor" href="#结构图" aria-hidden="true">#</a> 结构图</h3><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Registry：注册器，通常包含向注册表中添加、删除和查找对象等操作方法，注册表可以采用不同的数据结构来存储，如哈希表、列表或树等</li><li>Product：抽象产品，定义所有具体产品类的基本特征和行为</li><li>ProductA，ProductB：实现抽象产品接口的具体类</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>定义一个抽象产品类，并实现一些具体产品</p>',7),v=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"interface"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Product"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"    /**")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"     * 获取产品名称")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"     * "),s("span",{style:{color:"#569CD6"}},"@return")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A9955"}},"     */")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"getName"),s("span",{style:{color:"#D4D4D4"}},"();")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),b=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"ProductA"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"implements"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Product"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    @"),s("span",{style:{color:"#4EC9B0"}},"Override")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"getName"),s("span",{style:{color:"#D4D4D4"}},"() {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#CE9178"}},'"Product A"'),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),m=s("div",{class:"language-java line-numbers-mode","data-ext":"java"},[s("pre",{class:"shiki dark-plus",style:{"background-color":"#1E1E1E"},tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"class"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"ProductB"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#569CD6"}},"implements"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"Product"),s("span",{style:{color:"#D4D4D4"}}," {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    @"),s("span",{style:{color:"#4EC9B0"}},"Override")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    "),s("span",{style:{color:"#569CD6"}},"public"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#4EC9B0"}},"String"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#DCDCAA"}},"getName"),s("span",{style:{color:"#D4D4D4"}},"() {")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"        "),s("span",{style:{color:"#C586C0"}},"return"),s("span",{style:{color:"#D4D4D4"}}," "),s("span",{style:{color:"#CE9178"}},'"Product B"'),s("span",{style:{color:"#D4D4D4"}},";")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"    }")]),l(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D4D4D4"}},"}")]),l(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),g=p(`<p>创建注册器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Registry</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">private</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Map</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Product</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">products</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HashMap</span><span style="color:#D4D4D4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">registerProduct</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Product</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">product</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">products</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">put</span><span style="color:#D4D4D4;">(name, product);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Product</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">getProduct</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">products</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(name);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 注册产品</span></span>
<span class="line"><span style="color:#9CDCFE;">Registry</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">registerProduct</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Product A&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ProductA</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"><span style="color:#9CDCFE;">Registry</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">registerProduct</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Product B&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ProductB</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 获取产品</span></span>
<span class="line"><span style="color:#4EC9B0;">Product</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">product</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Registry</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getProduct</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Product A&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">product</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ol><li><strong>当需要支持对象的注册、查找和管理时</strong>，可以使用注册器模式来提高系统灵活性和可扩展性。例如，数据库连接池、事件监听器机制等。</li><li><strong>当需要解耦合作组件之间的关系，并且允许在运行时添加、删除和修改组件时</strong>，可以使用注册器模式。应用场景包括插件式架构、IoC容器等。</li><li><strong>当需要全局访问某个对象时</strong>，可以使用注册器模式。在这种情况下，通过将对象注册到全局的注册器中，并在任何时候使用已经注册的对象，可以方便地访问对象，避免了因为传递参数而带来的繁琐和复杂性。</li><li><strong>当需要在不同的组件之间建立一致的接口并进行交互时</strong>，可以使用注册器模式。例如，在插件式架构中，不同的插件提供不同的功能，为了统一这些插件的功能接口，可以将它们注册到同一个注册器中，并通过注册器来管理和调用这些插件。</li></ol>`,6);function E(h,A){const c=y("CodeTabs");return t(),D("div",null,[C,i(c,{id:"35",data:[{title:"Product"},{title:"ProductA"},{title:"ProductB"}],"tab-id":"shell"},{tab0:n(({title:a,value:e,isActive:o})=>[v]),tab1:n(({title:a,value:e,isActive:o})=>[b]),tab2:n(({title:a,value:e,isActive:o})=>[m]),_:1}),g])}const P=r(u,[["render",E],["__file","Registry.html.vue"]]);export{P as default};
