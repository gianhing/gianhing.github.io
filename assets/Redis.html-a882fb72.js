import{_ as o,Y as p,Z as i,$ as s,a0 as a,a2 as e,a1 as n,E as r}from"./framework-5e11dbd9.js";const c={},t=n(`<h2 id="什么是-redis" tabindex="-1"><a class="header-anchor" href="#什么是-redis" aria-hidden="true">#</a> 什么是 Redis？</h2><p>Redis 是基于内存的键值型（key - value）的 NoSQL 数据库（非关系型数据库）。key 一般是 String 类型，而 value 支持丰富的数据类型，包括String、Hash、List、Set、SortedSet 这五种基本类型，此外还有 GEO、BitMap、HyperLogLog 等其他类型。</p><h2 id="redis-有哪些特点" tabindex="-1"><a class="header-anchor" href="#redis-有哪些特点" aria-hidden="true">#</a> Redis 有哪些特点？</h2><ul><li><p>读写性能优异</p><ul><li>基于<strong>内存</strong>，内存的访问速度是比磁盘快很多的</li><li>采用<strong>单线程模型</strong>，不存在多线程的上下文切换，不需要考虑锁的问题</li><li>使用<strong>IO 多路复用模型</strong>，让 Redis 不需要创建额外的线程来监听客户端的大量请求，减少性能的消耗</li><li>内置了多种<strong>优化过的数据结构实现</strong></li></ul></li><li><p>所有操作命令都是原子性的</p></li><li><p>支持事务</p><ul><li>允许多个命令按顺序执行并不会被打断</li><li>不支持回滚</li></ul></li><li><p>支持数据持久化</p><ul><li>RDB：通过创建快照来获得存储在内存里面的数据在某个时间点上的副本</li><li>AOF：执行完更改数据的命令后，会将该命令记录到日志中</li></ul></li><li><p>支持分布式部署</p></li></ul><h2 id="redis-有哪些常见的应用场景" tabindex="-1"><a class="header-anchor" href="#redis-有哪些常见的应用场景" aria-hidden="true">#</a> Redis 有哪些常见的应用场景？</h2><p><strong>1. 数据缓存</strong></p><ul><li>将热点数据缓存到 Redis，提高数据读取和系统响应速度。</li><li>将用户凭证（如 token）存入 Redis，实现单点登录。</li></ul><p><strong>2. 分布式锁</strong></p><p>利用 Redis 的 setnx 命令实现互斥，对于 setnx 命令，如果 key 不存在则会设置 key 的值并返回 1，否则直接返回 0。</p><p>因此，可以通过 setnx 命令去尝试获取锁，获取锁成功才能继续执行相应业务。此外，还得给锁设置一个过期时间，防止系统出现问题导致锁无法释放。</p><p>使用命令为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">SET</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">key</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">value</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">EX</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">expire</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">NX</span><span style="color:#D4D4D4;"> </span><span style="color:#6A9955;"># 使用单命令保证设置指定 key 的值和过期时间是一个原子操作</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要更复杂的需求，可以采用 Redisson，它里面提供了多种分布式锁的实现。</p><p><strong>3. 限时业务的运用</strong></p><p>Redis 中可以使用 expire 命令设置一个键的生存时间，到时间后 Redis 会删除它。利用这一特性可以运用在限时的优惠活动信息、手机验证码等业务场景。</p><p><strong>4. 全局唯一 ID</strong></p><p>Redis 由于 incrby 命令可以实现原子性的递增，所以可以用于唯一分布式序列号的生成。</p><p><strong>5. 消息队列</strong></p><ul><li>基于 List 实现：利用 LPUSH 和 RPOP；</li><li>基于 PUB/SUB 实现；</li><li>基于 Stream 实现。</li></ul><p><strong>6. 共同关注</strong></p><p>由于 Set 支持交集、并集、差集等功能，可以实现共同关注、共同爱好等功能。</p><p><strong>7. 排行榜</strong></p><p>由于 SortedSet 是支持排序的，可以用于各种排行榜的场景。</p><p><strong>8. 统计活跃用户</strong></p><p>利用 BitMap，以日期为 key，用户 ID 为 offset，当日活跃过就设置为 1。</p><p><strong>9. 页面统计 UV</strong></p><p>将访问指定页面的每个用户 ID 添加到 HyperLogLog 中，调用 PFCOUNT 获取。</p><h2 id="redis-基础类型中的-string-底层实现是什么" tabindex="-1"><a class="header-anchor" href="#redis-基础类型中的-string-底层实现是什么" aria-hidden="true">#</a> Redis 基础类型中的 String 底层实现是什么？</h2><p>Redis 中 String 底层实现是自己构建的简单动态字符串（SDS），SDS 是由字符串长度、剩余空间大小和字符数组三部分组成，并使用动态扩容的方式来适应字符串长度的变化。SDS 的特点如下：</p><ul><li>二进制安全：可以存储任何二进制数据</li><li>空间预分配策略：可以避免频繁的内存分配和释放操作，提高了性能</li><li>动态扩容策略：可以避免缓存区的溢出，提高了安全性</li></ul><p>Redis 是在 SDS 的基础上实现字符串的相关命令，如 GET、SET、INCR 等。</p><h2 id="如何使用-redis-实现一个排行榜" tabindex="-1"><a class="header-anchor" href="#如何使用-redis-实现一个排行榜" aria-hidden="true">#</a> 如何使用 Redis 实现一个排行榜？</h2><p>利用有序集合 <code>Sorted Set</code> 来实现排行榜，<code>member</code>：用户（可以是 id、名称等），<code>score</code>：用户分数（排序的依据）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 添加或更新用户得分</span></span>
<span class="line"><span style="color:#DCDCAA;">redis&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">zadd</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ranking</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">user1</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">user2</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">30</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">user3</span></span>
<span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">integer</span><span style="color:#D4D4D4;">) 3</span></span>
<span class="line"><span style="color:#6A9955;"># 获取排行榜（-1：获取全部数据，也可以使用 n-1，取前 n 个数据）</span></span>
<span class="line"><span style="color:#DCDCAA;">redis&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">zrevrange</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ranking</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">withscores</span></span>
<span class="line"><span style="color:#DCDCAA;">1</span><span style="color:#D4D4D4;">) </span><span style="color:#CE9178;">&quot;user3&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">2</span><span style="color:#D4D4D4;">) </span><span style="color:#CE9178;">&quot;30&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">3</span><span style="color:#D4D4D4;">) </span><span style="color:#CE9178;">&quot;user2&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">4</span><span style="color:#D4D4D4;">) </span><span style="color:#CE9178;">&quot;20&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">5</span><span style="color:#D4D4D4;">) </span><span style="color:#CE9178;">&quot;user1&quot;</span></span>
<span class="line"><span style="color:#DCDCAA;">6</span><span style="color:#D4D4D4;">) </span><span style="color:#CE9178;">&quot;10&quot;</span></span>
<span class="line"><span style="color:#6A9955;"># 获取用户分数</span></span>
<span class="line"><span style="color:#DCDCAA;">redis&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">zscore</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ranking</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">user1</span></span>
<span class="line"><span style="color:#DCDCAA;">&quot;10&quot;</span></span>
<span class="line"><span style="color:#6A9955;"># 获取用户排名（从 0 开始）</span></span>
<span class="line"><span style="color:#DCDCAA;">redis&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">zrevrank</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ranking</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">user2</span></span>
<span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">integer</span><span style="color:#D4D4D4;">) 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何用-redis-实现分布式-session" tabindex="-1"><a class="header-anchor" href="#如何用-redis-实现分布式-session" aria-hidden="true">#</a> 如何用 Redis 实现分布式 Session？</h2><p>为什么需要分布式 Session？</p><p>Session 可以用来存储和共享用户在应用程序中的状态信息，在传统 Web 应用中，Session 一般存储在单个服务器的内存或磁盘中。在高并发下，单台服务器的处理能力可能不够，需要多台服务器进行集群部署。这时，如果用户的会话状态信息还只存储在其中一台服务器上，当请求转发到其他服务器上，就无法获取到之前的会话状态，导致会话丢失或会话不一致。因此，我们需要实现分布式 Session，将用户的会话状态存储到共享的存储系统，如 Redis。当请求转发到其他服务器上，能通过共享的存储系统来获取用户的会话状态，保证了各服务器间会话状态的一致性。</p><p>如何实现分布式 Session？</p><ul><li>用户登录成功后，生成一个全局唯一的 token 作为 Session ID，将用户的身份信息作为 Session 数据</li><li>将 Session 存储到 Redis 中，一般用 hash 结构进行存储，Session ID 作为 key（可以加上 <code>session:</code> 前缀进行标识），value 就是要存储的 Session 数据，并设置过期时间</li><li>将 token 返回给客户端，客户端将其保存起来</li><li>每次发送请求时，客户端都会携带上 token 值，服务器解析到 Session ID 后就到 Redis 中获取 Session 数据，如果没有则说明认证失败，用户未登录</li><li>当用户退出登录时，将 Redis 中的 Session 数据删除</li></ul><h2 id="讲一下-redis-的单线程模型-io-多路复用是什么" tabindex="-1"><a class="header-anchor" href="#讲一下-redis-的单线程模型-io-多路复用是什么" aria-hidden="true">#</a> 讲一下 Redis 的单线程模型，IO 多路复用是什么？</h2><p>Redis 单线程模型是指 Redis 只使用一个线程来处理客户端的所有请求（网络 IO 和键值对读写），可以避免线程的切换和竞争造成的消耗。</p><p>IO 多路复用是指利用单个线程同时监听多个 Socket，并在某个 Socket 可读、可写时得到通知，从而避免无效的等待，充分利用 CPU 资源。目前的 IO 多路复用是采用 epoll 模式实现，它会通知用户进程 Socket 就绪的同时，把已就绪的 Socket 写入用户空间，不需要通过遍历每个 Socket 来判断是否就绪，提升了性能。</p><p>Redis 网络模型就是利用 IO 多路复用结合事件处理器来应对多个 Socket 的请求，比如，提供了连接应答处理器、命令回复处理器、命令请求处理器。在 Redis 6.0 以后，为了提升更好的性能，在命令回复处理器使用了多线程来处理回复事件，在命令请求处理器中，在命令的转换使用了多线程，增加命令的转换速度，在命令执行的时候，依旧是单线程。</p><h2 id="redis-6-0-之后为何引入了多线程-6-0-之前为什么不使用多线程" tabindex="-1"><a class="header-anchor" href="#redis-6-0-之后为何引入了多线程-6-0-之前为什么不使用多线程" aria-hidden="true">#</a> Redis 6.0 之后为何引入了多线程？6.0 之前为什么不使用多线程？</h2><p>Redis 6.0 之前为什么不使用多线程？</p><ol><li>Redis 的性能瓶颈不在 CPU，而是受限于内存和网络</li><li>单线程可以降低实现的复杂度，易于维护，并且避免多线程的上下文切换、加锁解锁、死锁等造成的性能消耗</li></ol><p>引入多线程的原因？</p><p>由于单线程模型无法利用多核 CPU 的优势，在高并发的场景下，需要处理大量 IO 操作，会出现性能瓶颈。为了提高网络 IO 的读写性能，在 Redis 6.0 引入了多线程的支持。每个线程都可独立处理一组客户端的请求，分摊了网络 IO 的读写，充分利用了多核 CPU 的优势，提高系统吞吐量和并发性能。</p><p><strong>多线程只是用于处理网络数据的读写这种耗时操作，执行命令仍是单线程顺序执行的</strong>，因此不需要担心线程安全问题。</p><p>多线程是默认关闭的，只使用主线程。需要通过修改 <code>redis.conf</code> 配置文件来开启多线程。</p><h2 id="redis-有哪些数据类型-基础数据结构有几种-你还知道哪些-redis-的高级数据结构" tabindex="-1"><a class="header-anchor" href="#redis-有哪些数据类型-基础数据结构有几种-你还知道哪些-redis-的高级数据结构" aria-hidden="true">#</a> Redis 有哪些数据类型？基础数据结构有几种？你还知道哪些 Redis 的高级数据结构？</h2><p>Redis 提供了丰富的数据类型，包括五种基础数据结构：</p><ul><li>String（字符串）：最基本的数据类型，可以存储任何类型的数据，如字符串、整数、浮点数、二进制数据等</li><li>Hash（哈希表）：存储键值对的无序散列表</li><li>List（列表）：双向链表，可以在头部或尾部添加元素，支持正向查找和反向查找</li><li>Set（集合）：元素不重复的无序集合，支持集合的交并差操作</li><li>Sorted Set（有序集合）：类似 Set，但在每个元素上关联了 score 参数，能够根据 score 进行排序</li></ul><p>此外，Redis 还提供了一些高级数据结构，如：</p><ul><li>Bitmap：位图，用 0 和 1 来表示数据，支持位运算操作</li><li>HyperLogLog：用于记录大量不重复的元素，做统计基数估算</li><li>GEO：用于存储地理位置信息，可以进行距离计算和范围查询</li><li>Stream：流数据结构，可以实现消息队列等功能</li></ul><h2 id="redis-为什么快" tabindex="-1"><a class="header-anchor" href="#redis-为什么快" aria-hidden="true">#</a> Redis 为什么快？</h2><ul><li>内存存储：Redis 将数据存储在内存中，而不是磁盘，避免磁盘 IO 的时间消耗，并且内存访问速度更快</li><li>单线程模型：避免多线程的上下文切换和竞争的开销</li><li>IO 多路复用：通过异步非阻塞 IO 同时处理多个客户端请求，减少性能消耗</li><li>高效数据结构：内置了多种优化过的数据结构实现</li></ul><h2 id="如何使用-redis-实现分布式锁" tabindex="-1"><a class="header-anchor" href="#如何使用-redis-实现分布式锁" aria-hidden="true">#</a> 如何使用 Redis 实现分布式锁？</h2><p>利用 Redis 的 <code>SET</code> 命令实现分布式锁，基本实现思路如下：</p><ol><li>获取锁</li></ol><p>通过 <code>SET</code> 命令设置一个键值对，key 为锁的名称，value 为锁的持有者，利用 <code>NX</code> 选项保证当锁不存在时才设置成功，同时设置一个超时时间，防止系统出现问题导致锁无法释放。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">SET</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">lock_key</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">unique_id</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">NX</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">EX</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">expire_seconds</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果返回 1，则说明锁获取成功，否则说明该锁已被占用，需要等一段时间再重试</p><ol start="2"><li>释放锁</li></ol><p>通过 <code>DEL</code> 命令删除锁对应的键，但在此之前要判断该锁是不是自己持有的，防止出现误删，并且整个过程需要保证原子性（避免查到时是自己的锁，但突然锁过期了，导致删除了其他人设置的锁），可以通过 lua 脚本实现</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">redis</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;get&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">KEYS</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]) == </span><span style="color:#9CDCFE;">ARGV</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#C586C0;">then</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">redis</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;del&quot;</span><span style="color:#D4D4D4;">,</span><span style="color:#9CDCFE;">KEYS</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"><span style="color:#C586C0;">else</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#C586C0;">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后调用 <code>EVAL</code> 命令执行脚本，基本命令为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">EVAL</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">script</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">numkeys</span><span style="color:#D4D4D4;"> [key [key </span><span style="color:#CE9178;">...]]</span><span style="color:#D4D4D4;"> [arg [arg </span><span style="color:#CE9178;">...]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于该脚本内容比较多，直接在命令上写不够方便，因此将脚本保存为一个 lua 文件，调用命令 <code>redis-cli --eval [key [key ...]] , [arg [arg ...]]</code> 来执行文件（注意，用逗号分开 key 和 arg，并且逗号两边要加空格），即：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">redis-cli</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--eval</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">unlock.lua</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">lock_key</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">,</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">unique_id</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过上面步骤基本可以实现一个简单的分布式锁，但在实际应用中，可能还需要考虑其他因素，可以使用 Redisson 第三方库，它提供了多种分布式锁的实现</p><h2 id="如何用-redis-中的-hyperloglog-统计页面-uv" tabindex="-1"><a class="header-anchor" href="#如何用-redis-中的-hyperloglog-统计页面-uv" aria-hidden="true">#</a> 如何用 Redis 中的 HyperLogLog 统计页面 UV?</h2><p>为每个页面创建一个 HyperLogLog，并使用页面的唯一标识符作为 key，用户访问该页面时将用户 id 添加到里面</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">PFADD</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">uv:page1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">user1</span></span>
<span class="line"><span style="color:#DCDCAA;">PFADD</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">uv:page1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">user2</span></span>
<span class="line"><span style="color:#DCDCAA;">PFADD</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">uv:page1</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">user3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>PFCOUNT</code> 统计页面的访问数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">PFCOUNT</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">uv:page1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 HyperLogLog 进行页面 UV 统计的好处是：可以用极少的内存来统计大量的数据，通过近似计算来获取 UV 数，而不需要准确存储每个用户的 id，误差通常在 0.81% 左右</p><h2 id="什么是缓存穿透-如何解决" tabindex="-1"><a class="header-anchor" href="#什么是缓存穿透-如何解决" aria-hidden="true">#</a> 什么是缓存穿透，如何解决？</h2><p>缓存穿透：查询一个<strong>不存在</strong>的数据，MySQL 查询不到也<strong>不会写入缓存</strong>，导致<strong>每次都会查询到数据库</strong>。</p><p><strong>解决方案一：缓存空对象</strong></p><p>查询数据返回为 null 时，把空结果进行缓存，如 <code>{key: 1, value: null}</code></p><ul><li>优点：实现简单</li><li>缺点：消耗内存，可能发生数据不一致</li></ul><p><strong>解决方案二：布隆过滤器</strong></p><ol><li>将数据库中的要查询的数据字段（如 id ）添加到一个布隆过滤器中</li><li>查询时利用布隆过滤器判断数据是否存在，不存在直接返回</li><li>存在则查看是否命中缓存，命中直接返回数据</li><li>未命中就查询数据库，查询到数据就写入缓存并返回</li></ol><p>布隆过滤器就是用于检索一个数据是否存在一个集合中。底层是 BitMap（位图），一个只存放二进制 0 和 1 的数组。</p><ul><li>优点：内存占用少，查询效率高</li><li>缺点：有一定误判率，删除困难</li></ul><p>实现原理：先初始化一个存放二进制的数组，刚开始都为 0 。当要添加一个元素时，会将它进行多次 hash 运算，并将结果模于数组长度找到对应下标，将值改为 1 。查找同理，不过只是判断对应下标的值是否都为 1 。</p><p><strong>布隆过滤器只能保证说不存在时数据一定不存在，存在的话是数据可能存在，因为存在 hash 冲突的地方，概率非常低。</strong></p><p>基于 Redisson 实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">@</span><span style="color:#4EC9B0;">Test</span></span>
<span class="line"><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">testBloomFilter</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 配置</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">Config</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">Config</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">config</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">useSingleServer</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">setAddress</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;redis://127.0.0.1:6379&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 创建 RedissonClient 对象</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">RedissonClient</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">redissonClient</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Redisson</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">(config);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 获取布隆过滤器对象</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">RBloomFilter</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">String</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#9CDCFE;">bloomFilter</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">redissonClient</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getBloomFilter</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;bf_test&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">long</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">size</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">10000L</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">double</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">misjudge</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0.05</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 初始化布隆过滤器，第一个参数为预计存储元素数量，第二个参数为误判率</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">bloomFilter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">tryInit</span><span style="color:#D4D4D4;">(size, misjudge);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 添加数据</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">long</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; size; i++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">bloomFilter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">add</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;data_&quot;</span><span style="color:#D4D4D4;"> + i);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;初始化完成...&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 查找数据</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#4EC9B0;">long</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">; i &lt; size * </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">; i++) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">bloomFilter</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">contains</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;data_&quot;</span><span style="color:#D4D4D4;"> + i)) {</span></span>
<span class="line"><span style="color:#D4D4D4;">            count++;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">System</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">out</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">println</span><span style="color:#D4D4D4;">(count);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果原始数据被删除了，如何维护布隆过滤器？</p><p>由于存在 hash 冲突的情况下，不能直接将对应下标的值置为 0 ，否则可能会出现误删。</p><p>方案一：重新构建布隆过滤器，可以通过定时任务执行</p><p>方案二：增加一个等长的数组，存储计数器。每次删除时对应的计数器减一，为零时将布隆过滤器的对应位置的值置为 0</p>`,94),d={href:"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==&mid=2247515984&idx=5&sn=391c392a5b4581cf3b0d4c3f2e09e1c4&chksm=fbb136aeccc6bfb827fd0c34fe79fc8dec2a46c181609a74c42ad7b50729dc36fe6b4efd8a01&scene=27",target:"_blank",rel:"noopener noreferrer"},D=n(`<h2 id="什么是缓存击穿-如何解决" tabindex="-1"><a class="header-anchor" href="#什么是缓存击穿-如何解决" aria-hidden="true">#</a> 什么是缓存击穿，如何解决？</h2><p>缓存击穿：对于设置过期时间的 key ，当 key 过期时，正好有对该 key 的大量并发请求过来，直接打在了数据库上，可能将数据库击垮。</p><p><strong>解决方案一：互斥锁</strong></p><ol><li>当查询缓存时发现缓存失效，先利用 Redis 的 <code>setnx</code> 命令等方式获取互斥锁</li><li>获取锁成功之后进行查询数据库并重建缓存数据，完成后再释放锁</li><li>如果获取锁失败则先休眠一段时间再重新查询缓存</li></ol><ul><li>优点：强一致性，能保证获取到数据是最新的</li><li>缺点：性能较低，获取锁失败时需要等待</li></ul><p><strong>解决方案二：逻辑过期</strong></p><ol><li>对于 key 不设置过期时间，只添加一个过期时间字段</li><li>查询缓存时，先从 Redis 中取出数据判断时间是否过期</li><li>如果过期同样先获取互斥锁</li><li>获取锁成功后开启一个新线程执行缓存重建过程，当前线程直接返回过期数据</li><li>获取锁失败则说明已有线程在执行缓存重建过程，因此直接返回过期数据</li><li>新线程通过查询数据库进行缓存重建，并重置逻辑过期时间，完成后释放锁</li></ol><ul><li>优点：高可用，性能较好</li><li>缺点：会短暂出现数据不一致的情况</li></ul><h2 id="什么是缓存雪崩-如何解决" tabindex="-1"><a class="header-anchor" href="#什么是缓存雪崩-如何解决" aria-hidden="true">#</a> 什么是缓存雪崩，如何解决？</h2><p>缓存雪崩：设置缓存时采用相同的过期时间使得大量 key 在同一时刻失效，或者 Redis 宕机，导致大量请求到达数据库，带来巨大压力。</p><p><strong>解决方案：</strong></p><ol><li>给不同的 key 的 TTL 添加随机值，将失效时间分散开</li><li>利用 Redis 集群提高服务的可用性，如哨兵模式、集群模式</li><li>给缓存业务增加降级限流策略，通过 Nginx、Spring Cloud Gateway 实现</li><li>给业务添加多级缓存，如使用 Guava、Caffeine 作为一级缓存，Redis 作为二级缓存</li></ol><blockquote><p>限流可作为系统的保底策略，适用于缓存穿透、击穿、雪崩</p></blockquote><h2 id="redis-做缓存时-mysql-中数据如何与-redis-进行同步" tabindex="-1"><a class="header-anchor" href="#redis-做缓存时-mysql-中数据如何与-redis-进行同步" aria-hidden="true">#</a> Redis 做缓存时，MySQL 中数据如何与 Redis 进行同步？</h2><blockquote><p>缓存的双写一致性：当修改数据库的数据同时也要同时更新缓存中的数据，缓存与数据库的数据要保持一致。</p></blockquote><p>不论是先删除缓存，再更新数据库；还是先更新数据库，再删除缓存都会出现数据不一致的情况。</p><ol><li>如果先删缓存，在还没有来得及更新数据库时，另一个线程就来读取，发现缓存为空就会去数据库读取数据并写入缓存后，当前线程才执行更新数据库，这就导致了缓存和数据库的数据不一致</li><li>当一个线程查询缓存时未命中，就会去查数据库，在写入缓存之前如果有另一个线程进行数据的更新（先更新数据库，再删除缓存），那么也会出现数据不一致的情况</li></ol><p><strong>方案一：延时双删</strong></p><p>写操作时，先删除 Redis 缓存，然后更新数据库，延时一定时间后再删除缓存（为了能够将读请求产生的脏数据缓存删除，同时要考虑数据库主从同步的耗时）。但由于延时时间无法确定的，所以依然可能出现数据不一致。</p><p><strong>方案二：加读写锁</strong></p><p>读数据时添加共享锁，保证读读不互斥，读写互斥；更新数据时，添加排他锁，它是保证读读、读写都互斥，可以保证写数据时不会有其他线程读取数据，避免了脏数据。</p><ul><li>优点：强一致性</li><li>缺点：性能较低</li></ul><p>可以基于 Redisson 提供的读写锁实现</p><p>读数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">User</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">queryById</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Long</span><span style="color:#D4D4D4;"> id) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">RReadWriteLock</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">readWriteLock</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">redissonClient</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getReadWriteLock</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;USER_READ_WRITE_LOCK&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">RLock</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">readLock</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">readWriteLock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">readLock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 尝试获取锁</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">readLock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">tryLock</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 获取锁失败，休眠后重试</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 获取锁成功</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 查询缓存，成功则返回数据</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 缓存未命中查询数据库</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 写入缓存并返回数据</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 锁释放</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">readLock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unLock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">modifyById</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Long</span><span style="color:#D4D4D4;"> id) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">RReadWriteLock</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">readWriteLock</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">redissonClient</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getReadWriteLock</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;USER_READ_WRITE_LOCK&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">RLock</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">writeLock</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">readWriteLock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">writeLock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;">// 尝试获取锁</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">writeLock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">tryLock</span><span style="color:#D4D4D4;">()) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 获取锁失败，休眠后重试</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 获取锁成功</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 更新数据库</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 删除缓存</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// 锁释放</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">writeLock</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">unLock</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：读方法和写方法要用同一把读写锁。</p></blockquote><p><strong>方案三：异步通知</strong></p><p>当数据库数据更新后，发送消息通知 Redis 更新缓存。<strong>异步通知能保证数据的最终一致性</strong>。</p><p>实现方式：</p><ol><li><p>基于 MQ</p><p>数据库更新数据后，发送消息到 MQ；通过监听消息来更新缓存</p></li><li><p>基于 Canal</p><p>Canal 是伪装成 MySQL 的从节点来监听 binlog 日志，当数据发生变化时从 Canal 客户端获取数据并更新缓存</p></li></ol><h2 id="redis-的持久化机制有哪些-说说各自的优缺点和应用场景" tabindex="-1"><a class="header-anchor" href="#redis-的持久化机制有哪些-说说各自的优缺点和应用场景" aria-hidden="true">#</a> Redis 的持久化机制有哪些？说说各自的优缺点和应用场景？</h2><p>Redis 的持久化机制有 RDB 和 AOF 两种。</p><p><strong>RDB</strong>：把当前内存的数据生成快照并保存的磁盘中，生成 RDB 文件。</p><p>主动备份：</p><ul><li><code>save</code>：由 Redis 主进程来执行 RDB，会阻塞所有命令</li><li><code>bgsave</code>：通过 fork 创建子进程，由子进程执行 RDB，不会阻塞主进程</li></ul><blockquote><p>fork：采用 copy-on-write 技术：</p><ul><li>当主进程执行读操作时，访问共享内存</li><li>当主进程执行写操作时，会拷贝一份数据，进行写操作</li></ul></blockquote><p>自动备份：在 <code>redis.conf</code> 中有默认的配置：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 900秒内，如果至少有1个key被修改，则执行 bgsave</span></span>
<span class="line"><span style="color:#D4D4D4;">save 900 1  </span></span>
<span class="line"><span style="color:#D4D4D4;">save 300 10  </span></span>
<span class="line"><span style="color:#D4D4D4;">save 60 10000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>RDB 的优缺点：</strong></p><ul><li>优点： <ul><li>RDB 文件是经过压缩的二进制文件，文件小，可以用于备份、全量复制等场景</li><li>恢复大数据集的时候，RDB 速度更快</li></ul></li><li>缺点： <ul><li>实时性不够，如果 Redis 发生故障，最后一次快照到发生故障时刻，这中间部分的数据会丢失</li></ul></li></ul><p><strong>AOF</strong>：将 Redis 中进行更改操作的命令以追加的方式保存到 AOF 文件的末尾。</p><p>AOF 是默认关闭的，需要修改 <code>redis.conf</code> 的配置：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 开启AOF功能，默认是no</span></span>
<span class="line"><span style="color:#D4D4D4;">appendonly yes</span></span>
<span class="line"><span style="color:#6A9955;"># 设置AOF文件的名称</span></span>
<span class="line"><span style="color:#D4D4D4;">appendfilename </span><span style="color:#CE9178;">&quot;appendonly.aof&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置同步策略：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 表示每执行一次写命令，立即记录到AOF文件</span></span>
<span class="line"><span style="color:#D4D4D4;">appendfsync always </span></span>
<span class="line"><span style="color:#6A9955;"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span></span>
<span class="line"><span style="color:#D4D4D4;">appendfsync everysec </span></span>
<span class="line"><span style="color:#6A9955;"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span>
<span class="line"><span style="color:#D4D4D4;">appendfsync no</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>配置项</th><th>刷盘时机</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>always</td><td>同步刷盘</td><td>可靠性高，几乎不丢数据</td><td>性能影响大</td></tr><tr><td>everysec</td><td>每秒刷盘</td><td>性能适中</td><td>最多丢失一秒数据</td></tr><tr><td>no</td><td>操作系统控制</td><td>性能最好</td><td>可靠性较差，可能丢失大量数据</td></tr></tbody></table><p><strong>AOF 重写</strong>：通过 <code>bgrewriteaof</code> 创建一个新的 AOF 文件来替换现有的 AOF ，新旧两个 AOF 文件保存的数据相同，但新 AOF 文件没有了冗余命令</p><p>Redis 也会在触发阈值时自动去重写 AOF 文件。阈值也可以在 <code>redis.conf</code> 中配置：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># AOF文件比上次文件 增长超过多少百分比则触发重写</span></span>
<span class="line"><span style="color:#D4D4D4;">auto-aof-rewrite-percentage 100</span></span>
<span class="line"><span style="color:#6A9955;"># AOF文件体积最小多大以上才触发重写</span></span>
<span class="line"><span style="color:#D4D4D4;">auto-aof-rewrite-min-size 64mb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AOF 的优缺点</strong>：</p><ul><li>优点： <ul><li>保证最小化的数据丢失（最多丢失 1 秒内的数据）</li><li>AOF 是以日志的形式记录 Redis 中数据的详细操作，可以读取、分析 AOF 文件，并利用它来处理一些问题，比如数据误删的恢复</li></ul></li><li>缺点： <ul><li>由于 AOF 会记录每一条操作命令，通常情况下文件大小会比 RDB 的要大</li><li>恢复大数据集时，速度要比 RDB 慢</li></ul></li></ul><table><thead><tr><th></th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>持久化方式</td><td>定时对整个内存做快照</td><td>记录每一次写操作命令</td></tr><tr><td>数据完整性</td><td>最后一次快照到发生故障时刻，这中间部分的数据会丢失</td><td>相对完整，取决于刷盘策略</td></tr><tr><td>文件大小</td><td>有压缩，文件体积小</td><td>记录命令，文件体积较大</td></tr><tr><td>宕机恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据恢复优先级</td><td>低，因为数据完整性不如 AOF</td><td>高，数据完整性更高</td></tr><tr><td>系统资源占用</td><td>高，占用大量 CPU 和内存资源</td><td>低，主要是磁盘IO资源，但 AOF 重写会占用大量 CPU 和内存资源</td></tr></tbody></table><p><strong>应用场景：</strong></p><ul><li>RDB 适用于数据量较大、备份、数据恢复的场景</li><li>AOF 适用于数据安全性要求较高的场景</li><li>通常情况下，建议同时启用 RDB 和 AOF，以提供更好的数据保护和恢复能力</li></ul><h2 id="redis-的-过期删除策略有哪些" tabindex="-1"><a class="header-anchor" href="#redis-的-过期删除策略有哪些" aria-hidden="true">#</a> Redis 的 过期删除策略有哪些？</h2><p>Redis 数据过期后，需要将数据从内存删除。有两种不同的删除策略：</p><p><strong>惰性删除</strong>：对于设置过期时间的 key，当使用时先检查该 key 是否过期，过期就删除，没有则返回数据。</p><ul><li>优点：对 CPU 友好，只有使用时才会对 key 做过期检查</li><li>缺点：对内存不友好，可能会造成太多过期 key 没有被删除</li></ul><p><strong>定期删除</strong>：每隔一段时间对一些 key 进行检查，删除过期的 key</p><p>定期删除有两种模式：</p><ul><li>SLOW 模式：定时任务，执行频率是 10 hz（每秒执行 10 次），每次不超过 25 ms，可以通过修改 <code>redis.conf</code> 文件中的 <code>hz</code> 参数调整执行频率</li><li>FAST 模式：执行频率不固定，但两次间隔不低于 2 ms，每次耗时不超过 1 ms</li></ul><p>优点：可以通过限制删除操作的执行时长和频率来减少对 CPU 的影响，能够有效的释放过期键所占用的内存</p><p>缺点：难以确定删除操作执行的时长和频率</p><p><strong>Redis的过期删除策略：惰性删除 + 定期删除 两种策略进行配合使用</strong></p><h2 id="讲一下-redis-中的数据淘汰机制、有哪些数据淘汰策略" tabindex="-1"><a class="header-anchor" href="#讲一下-redis-中的数据淘汰机制、有哪些数据淘汰策略" aria-hidden="true">#</a> 讲一下 Redis 中的数据淘汰机制、有哪些数据淘汰策略？</h2><p>Redis 是基于内存的数据库，需要注意内存的使用情况。Redis 提供了内存淘汰机制，当内存不足时，就可以采用预先设置的策略删除数据，释放内存空间。数据淘汰策略包括：</p><ul><li><code>noeviction</code>：禁止驱逐数据，当内存不足时，新写入操作将会被拒绝（默认配置）</li><li><code>volatile-lru</code>：在已设置过期时间的数据集中挑选最近最少使用的数据进行淘汰</li><li><code>volatile-ttl</code>：在已设置过期时间的数据集中挑选即将过期的数据进行淘汰</li><li><code>volatile-random</code>：在已设置过期时间的数据集中随机挑选数据进行淘汰</li><li><code>allkeys-lru</code>：在全部数据集中挑选最近最少使用的数据进行淘汰</li><li><code>allkeys-random</code>：在全部数据集中随机挑选数据进行淘汰</li><li><code>volatile-lfu</code>：在已设置过期时间的数据集中挑选最不经常使用的数据进行淘汰</li><li><code>allkeys-lfu</code>：在全部数据集中挑选最不经常使用的数据进行淘汰</li></ul><p>数据淘汰策略的使用建议：</p><ol><li><p>优先使用 <code>allkeys-lru</code> 策略。充分利用 LRU 算法的优势，把最近最常访问的数据留在缓存中。如果业务有明显的冷热数据区分，建议使用。</p></li><li><p>如果业务中数据访问频率差别不大，没有明显冷热数据区分，建议使用 <code>allkeys-random</code>，随机选择淘汰。</p></li><li><p>如果业务中有置顶的需求，可以使用 <code>volatile-lru</code> 策略，同时置顶数据不设置过期时间，这些数据就一直不被删除，会淘汰其他设置过期时间的数据。</p></li><li><p>如果业务中有短时高频访问的数据，可以使用 <code>allkeys-lfu</code> 或 <code>volatile-lfu</code> 策略。</p></li></ol><blockquote><p>Q：数据库有 1000 w数据，Redis 只能存 20 w，如何保证 Redis 中的数据都是热点数据？</p><p>A：挑选最近最少使用的数据淘汰策略（如 allkeys-lru），留下来的就是最常访问的数据。</p><p>Q：Redis 内存用完了会发生什么？</p><p>A：主要看配置的数据淘汰策略。如果是默认的配置（noeviction），会直接报错。</p></blockquote><h2 id="讲一下-redisson-分布式锁" tabindex="-1"><a class="header-anchor" href="#讲一下-redisson-分布式锁" aria-hidden="true">#</a> 讲一下 Redisson 分布式锁</h2><blockquote><p>Redis 实现分布式锁要如何合理控制锁的时长？有两种方式：</p><ol><li>根据业务执行时间预估（不好确定，可能因为网络问题等）</li><li>给锁续期</li></ol><p>给锁续期自己实现起来有些复杂，需要新开一个线程来监控业务的执行，如果执行时间过长就给锁续期。因此可以采用 Redisson 实现的分布式锁。</p></blockquote><p>Redisson 分布式锁的执行流程：</p><ol><li><p>当一个线程尝试获取锁成功时，就可以执行自己的业务；同时，Redisson 会增加一个看门狗机制，每隔一段时间（releaseTime / 3，releaseTime 默认为 30 s）检查该线程是否还持有锁，如果有就增加锁的持有时间，当业务执行完再释放锁。</p></li><li><p>当其他线程尝试获取锁失败时，不会立即返回获取锁失败，而是先通过 while 循环不断尝试获取锁，在这期间内如果持有该锁的线程释放了锁就能获取锁成功；当然，如果循环超出一定阈值，也会返回获取锁失败。</p><blockquote><p>这种锁重试机制能够很好地提升锁的使用性能</p></blockquote></li></ol><p>利用 Redisson 实现分布式锁的核心是 <code>RedissonLock</code> 的 <code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code> 方法：</p><ul><li><code>waitTime</code>：获取锁失败的等待时间</li><li><code>leaseTime</code>：锁的失效时间，如果没设置或设置为 -1，就会添加看门狗机制，自动给锁续期；如果设置了其他值，就没有 watchdog 监听</li><li><code>unit</code>：时间单位</li></ul><p><strong>Redisson 的加锁、设置过期时间等操作都是基于 lua 脚本完成，能够保证原子性</strong></p><blockquote><p>Q：Redisson 实现的分布式锁是可重入的吗？</p><p>A：是可重入的。内部会判断是否是当前线程持有的锁，是的话进行计数加 1，释放锁时次数减 1。利用 Redis 的 hash 结构，key 为锁的名称，field 为线程的唯一标识，value 为重入次数。</p><p>Q：Redisson 实现的分布式锁如何保证主从一致性？</p><p>A：可以通过 RedLock 来实现。RedLock 会在多个 Redis 实例上创建锁（n / 2 + 1），避免主节点宕机后数据丢失。然而使用 RedLock 性能较差，一般不推荐使用。</p><p>由于 Redis 集群是 AP 思想，优先保证的是高可用性；如果业务非要保证数据的强一致性，建议使用 CP 思想的 Zookeeper 实现分布式锁。</p></blockquote><h2 id="什么是-redis-的主从同步" tabindex="-1"><a class="header-anchor" href="#什么是-redis-的主从同步" aria-hidden="true">#</a> 什么是 Redis 的主从同步？</h2><p>由于单节点的 Redis 并发能力是有限的，要进一步提高 Redis 的并发能力，可以搭建主从集群，实现读写分离。一般情况下是一主多从，主节点负责写，从节点负责读。</p><p><strong>主从同步的流程：<strong>分为</strong>全量同步</strong>和<strong>增量同步</strong></p><p><strong>全量同步：从节点第一次与主节点建立连接</strong></p><ol><li>从节点向主节点请求数据同步，其中从节点会携带 replication id 和 offset 偏移量</li><li>主节点判断是否是第一次请求，即判断主节点和从节点是否是同一个 replication id，如果不是则说明是第一次同步，主节点会把自己的 replication id 和 offset 发送给从节点，让从节点和主节点的信息一致</li><li>主节点执行 bgsave 生成 RDB 文件，发给从节点，从节点先把自己的数据清空再执行该 RDB 文件</li><li>在生成 RDB 文件期间，如果有请求到了主节点，主节点会以命令的方式记录到日志文件（repl_baklog），再把该日志文件发送给从节点，实现主从数据的完全一致</li></ol><p><strong>增量同步：从节点重启或以后的数据变化</strong></p><ol><li>从节点请求主节点数据同步，主节点判断不是第一次请求，获取从节点的 offset 值</li><li>主节点从命令日志中获取 offset 值之后的数据，发送给从节点进行数据同步</li></ol><blockquote><ul><li><p>replication Id：简称 replid，是数据集的标记，id 一致则说明是同一数据集。每一个 master 都有唯一的 replid，slave 则会继承 master 节点的 replid</p></li><li><p>offset：偏移量，随着记录在 repl_baklog 中的数据增多而逐渐增大。slave 完成同步时也会记录当前同步的 offset。如果 slave 的 offset 小于 master 的 offset，说明 slave 数据落后于 master，需要更新</p></li></ul></blockquote><h2 id="讲一下-redis-的哨兵机制" tabindex="-1"><a class="header-anchor" href="#讲一下-redis-的哨兵机制" aria-hidden="true">#</a> 讲一下 Redis 的哨兵机制</h2><p>Redis 提供的哨兵（Sentinel）机制可以实现主从集群的自动故障恢复。作用如下：</p><ol><li>监控：Sentinel 会不断检查 master 和 slave 是否正常工作</li><li>自动故障恢复：如果 master 故障，Sentinel 会将一个 slave 提升为 master。当故障实例恢复时也以新的 master 为主</li><li>通知：Sentinel 充当 Redis 客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给 Redis 的客户端</li></ol><p><strong>服务状态监控</strong>：Sentinel 基于心跳机制监测服务状态，每隔一秒向集群的每个实例发送 ping 命令</p><ul><li>主观下线：如果某 Sentinel 节点发现某个实例未在规定时间内响应，则认为该实例主观下线</li><li>客观下线：若超过指定数量（quorum）的 Sentinel 节点都认为某实例主观下线，则该实例客观下线。quorum 最好是超过 Sentinel 实例数的一半</li></ul><p><strong>哨兵选主规则：</strong></p><ol><li>首先判断主与从节点断开时间的长短，断开时间比较久的从节点先排除</li><li>然后判断从节点的 <code>slave-priority</code> 值，越小优先级越高（通过配置文件配置）</li><li><strong>如果 <code>slave-prority</code> 一样，则判断 slave 节点的 offset 值，越大优先级越高</strong></li><li>最后是判断 slave 节点的运行 id 大小，越小优先级越高</li></ol><p><strong>Redis 集群脑裂的问题</strong></p><p>Redis 脑裂：当 Redis 主从集群中出现两个 master 节点能接收客户端的读写请求，可能导致数据丢失的问题。出现的场景如下：</p><ol><li>主节点发生阻塞，不响应哨兵心跳，哨兵判断为客观下线，进行选举一个从节点为主节点；而在选举期间，主节点恢复和客户端的通信，客户端依旧可以向原主节点写数据，这就出现了两个主节点</li><li>发生网络分区，主节点和从节点、哨兵处于不同的网络分区，哨兵无法心跳感知主节点，通过选举将一个从节点提升为主节点，然而原主节点依旧可以跟客户端通信，也出现了两个主节点，并且网络恢复时，原主节点也会被降为从节点</li></ol><p>上面的两个场景中，当确定新的主节点时，会向所有实例发送 <code>slave of</code> 命令，让所有实例进行全量同步，这就会让在原主节点执行的命令被清空，导致数据丢失。</p><p>解决方案</p><p>在 Redis 提供了两个配置项：</p><ul><li><code>min-slaves-to-write</code>：主节点最少有多少个从节点才能进行写操作</li><li><code>min-slaves-max-lag</code>：主节点和从节点同步的延迟阈值，如果超过了阈值，主节点将拒绝写请求</li></ul><p>如果达不到其中某一个条件，主节点都会直接拒绝请求，这样可以很大程度地避免数据的丢失。</p>`,103),y={href:"https://blog.csdn.net/Andrew_Chenwq/article/details/127497081",target:"_blank",rel:"noopener noreferrer"},u=n('<h2 id="讲一下-redis-的分片集群" tabindex="-1"><a class="header-anchor" href="#讲一下-redis-的分片集群" aria-hidden="true">#</a> 讲一下 Redis 的分片集群</h2><p>Redis 的分片集群可以解决<strong>海量数据存储</strong>和<strong>高并发写</strong>的问题。特征如下：</p><ul><li>集群中有多个 master 节点，每个 master 节点保存不同数据</li><li>每个 master 节点还可以有多个 slave 节点</li><li>master 之间通过 ping 监测彼此的健康状态</li><li>客户端请求可以访问集群的任意节点，最终都会转发到正确的节点上</li></ul><p>Redis 分片集群的读写规则：</p><p>Redis 的分片集群中引入了哈希槽的概念，Redis 集群有 16384 个哈希槽，并将这些哈希槽分配到集群中不同主节点上。根据 key 的有效部分进行 CRC16 校验，将结果与 16384 取模来决定放置到哪个槽，通过槽找到对应节点进行存储。</p><blockquote><p>key 的有效部分：如果 key 前面有大括号，大括号里面的内容就是有效部分；否则，整个 key 都是有效部分</p></blockquote>',6);function v(C,b){const l=r("ExternalLinkIcon");return p(),i("div",null,[t,s("blockquote",null,[s("p",null,[s("a",d,[a("什么是布隆过滤器？如何解决高并发缓存穿透问题？"),e(l)])])]),D,s("blockquote",null,[s("p",null,[s("a",y,[a("Redis 脑裂现象和解决方案"),e(l)])])]),u])}const g=o(c,[["render",v],["__file","Redis.html.vue"]]);export{g as default};
