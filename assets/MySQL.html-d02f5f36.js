import{_ as o,Y as i,Z as p,$ as l,a0 as e,a2 as n,a1 as a,E as c}from"./framework-5e11dbd9.js";const d={},r=a(`<h2 id="mysql-字符串截取函数有哪些" tabindex="-1"><a class="header-anchor" href="#mysql-字符串截取函数有哪些" aria-hidden="true">#</a> MySQL 字符串截取函数有哪些？</h2><p>在 MySQL 中，可以使用 <code>substr</code>、<code>substring</code> 或 <code>substring_index</code> 函数来从一个字符串中截取出子串：</p><ul><li><code>substr(str, pos, len)</code> 和 <code>substring(str, pos, len)</code> 功能相同，只不过 <code>substr</code> 是 MySQL 提供的函数，<code>substring</code> 是 标准 SQL 函数 <ul><li>str：要截取的字符串</li><li>pos：截取的起始位置（从 1 开始），如果为负数，从字符串末尾向前截取 <code>|pos|</code> 个字符（不需要加 len 参数）</li><li>len：可选参数，截取的长度。若没指定，截取从 pos 到结尾的所有字符</li></ul></li><li><code>substring_index(str, delim, count)</code> 根据指定字符分隔符截取字符串 <ul><li>str：要截取的字符串</li><li>delim：字符分隔符</li><li>count：当 <code>count</code> 大于 0 时，截取从开头到第 <code>count</code> 个出现的分隔符之间的字符；当 <code>count</code> 小于 0 时，从右侧查找第 <code>|count|</code> 个出现的分隔符，截取分隔符之后的字符；当 <code>count</code> 等于 0，返回空字符串。</li></ul></li></ul><h2 id="mysql-条件判断函数有哪些" tabindex="-1"><a class="header-anchor" href="#mysql-条件判断函数有哪些" aria-hidden="true">#</a> MySQL 条件判断函数有哪些？</h2><ol><li><code>CASE WHEN</code>：类似于 Java 中的<code>if else</code>语句，语法如下：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">CASE</span><span style="color:#D4D4D4;"> expression</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">WHEN</span><span style="color:#D4D4D4;"> condition1 </span><span style="color:#569CD6;">THEN</span><span style="color:#D4D4D4;"> result1</span></span>
<span class="line"><span style="color:#D4D4D4;">	[WHEN condition2 THEN result2]</span></span>
<span class="line"><span style="color:#D4D4D4;">	...</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">ELSE</span><span style="color:#D4D4D4;"> result</span></span>
<span class="line"><span style="color:#569CD6;">END</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>CASE</code>为条件判断入口，<code>END</code>为条件判断结束，如果 expression 满足 condition1，则返回 result1（满足 condition2，则返回 result2...），全部不满足则返回 result。</p><p>也可写成：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">CASE</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">WHEN</span></span>
<span class="line"><span style="color:#D4D4D4;">	expr1 </span><span style="color:#569CD6;">THEN</span><span style="color:#D4D4D4;"> result1</span></span>
<span class="line"><span style="color:#D4D4D4;">	[expr2 THEN result2]</span></span>
<span class="line"><span style="color:#D4D4D4;">	...</span></span>
<span class="line"><span style="color:#D4D4D4;">	</span><span style="color:#569CD6;">ELSE</span><span style="color:#D4D4D4;"> result</span></span>
<span class="line"><span style="color:#569CD6;">END</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>IF</code>函数：类似于 Java 中的三元运算符，用于根据条件返回特定值，语法如下：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">IF</span><span style="color:#D4D4D4;">(expr, v1, v2)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>expr</code>是一个条件表达式，如果结果为<code>true</code>，则返回<code>v1</code>，<code>false</code>则返回<code>v2</code>。</p><ol start="3"><li><code>IFNULL</code>函数：用于判断第一个表达式是否为 NULL，如果为 NULL 则返回第二个参数的值，如果不为 NULL 则返回第一个参数的值。语法如下：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">IFNULL</span><span style="color:#D4D4D4;">(expr, val)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数通常用于对空值的处理，即当结果为 <code>null</code> 时就转换成特定的值。</p><h2 id="什么是数据库事务-讲一下事务的-acid-特性" tabindex="-1"><a class="header-anchor" href="#什么是数据库事务-讲一下事务的-acid-特性" aria-hidden="true">#</a> 什么是数据库事务？讲一下事务的 ACID 特性？</h2><p>数据库事务：将一系列操作当做不可分割的单元，要么全部执行成功，要么全部失败回滚。</p><p>事务的 ACID 特性：</p><ul><li>原子性：事务是原子操作，成功则全部提交，失败则全部回滚到事务执行之前的状态。</li><li>一致性：执行事务前后，数据保持一致。</li><li>隔离性：事务不被其他并发事务影响，都是在独立的环境下执行的。</li><li>永久性：事务一旦提交或回滚后，对数据库中数据的改变是永久的。</li></ul><h2 id="mysql-日志有了解过吗-binlog、redolog、undolog-分别有什么作用" tabindex="-1"><a class="header-anchor" href="#mysql-日志有了解过吗-binlog、redolog、undolog-分别有什么作用" aria-hidden="true">#</a> MySQL 日志有了解过吗？binlog、redolog、undolog 分别有什么作用</h2><ul><li>biglog（归档日志）：MySQL 中的二进制日志文件，记录所有修改数据的 SQL 操作。数据备份、主从复制等都需要依靠<code>biglog</code>日志文件。</li><li>redolog（重做日志）：InnoDB 独有的，用于崩溃恢复。数据发生修改后，<code>redolog</code>就会记录下来（记录的是在数据页上做的修改）。如果 MySQL 发生宕机或崩溃时，InnoDB 会通过<code>redolog</code>来恢复数据。</li><li>undolog（回滚日志）：当数据修改之前，<code>undolog</code>会将记录当前的状态，如果事务发生异常时，可根据<code>undolog</code>将数据回滚到修改前的样子。</li></ul><p>接下来看一下 MySQL 对于一条数据更新操作是如何处理的？</p><ol><li>MySQL 会先到缓冲池（BufferPool）查找要修改的数据，没找到会从磁盘中把那一页的数据加载出来，放到<code>BufferPool</code>中</li><li>加载到<code>BufferPool</code>的同时，会将这条数据的原始记录保存到<code>undolog</code>中</li><li>在<code>BufferPool</code>中执行更新操作</li><li>更新后会把“在某个数据页上做了什么修改”记录到<code>redo log buffer</code>里</li><li>完成之后就可以提交事务，此时会做三件事： <ol><li>将<code>redo log buffer</code>中的数据刷入到<code>redolog</code>文件中</li><li>将本次操作记录到<code>biglog</code>日志</li><li>在<code>redolog</code>中添加<code>commit</code>标记</li></ol></li></ol><h2 id="数据库索引是什么-有什么作用-什么场景适合使用索引" tabindex="-1"><a class="header-anchor" href="#数据库索引是什么-有什么作用-什么场景适合使用索引" aria-hidden="true">#</a> 数据库索引是什么，有什么作用，什么场景适合使用索引？</h2><p>数据库索引就是用于<strong>帮助数据库快速检索数据的数据结构</strong>，分有四种索引结构：</p><ul><li>B+Tree 索引：MySQL 里默认和最常用的索引类型。</li><li>Hash 索引：底层数据结构是使用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</li><li>R-Tree（空间索引）：MyISAM引擎的一种特殊的索引类型，主要用于地理空间数据类型</li><li>Full-text（全文索引）：是一种通过建立倒排索引，快速匹配文档的方式，类似于 ES</li></ul><p><strong>优点</strong>：</p><ul><li>提高数据检索的效率，降低数据库的 IO 成本</li><li>通过 B+Tree 索引对数据进行排序和分组，不需要创建临时表，降低数据排序的成本，从而降低CPU的消耗</li></ul><p><strong>缺点</strong>：</p><ul><li>索引需要占用物理空间</li><li>当对表进行增加、删除和修改操作时，需要动态维护索引，从而降低更新表的执行效率</li></ul><p><strong>什么场景适合使用索引？</strong></p><ul><li>对数据量较大，且查询比较频繁的表建立索引</li><li>对常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>对经常作为连接的字段建立索引</li><li>尽量使用区分度较高的列作为索引，尽量建立唯一索引，区分度高，索引的效率越高</li><li>如果是字符串类型的字段，并且长度较长，可以针对字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引。查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提供查询效率</li><li>要控制索引数据，索引越多，维护索引的代价也就越大，会影响增删改的效率</li><li>如果索引列不能存储 NULL 值，在创建表时使用 NOT NULL 约束。</li></ul><h2 id="你是怎么做-mysql-数据备份的-比如怎么恢复半个月前的数据" tabindex="-1"><a class="header-anchor" href="#你是怎么做-mysql-数据备份的-比如怎么恢复半个月前的数据" aria-hidden="true">#</a> 你是怎么做 MySQL 数据备份的？比如怎么恢复半个月前的数据？</h2><p>为了避免数据库数据丢失造成巨大损失，应定期给数据做备份。一旦数据需要恢复的时候就可以利用这些备份数据快速恢复，从而最大程度减少损失。</p><p>数据备份可分为物理备份和逻辑备份。</p><ul><li><p>物理备份：将数据库物理文件（如数据文件）进行备份，恢复速度比较快，但占用空间比较大，MySQL 可以用 <code>xtrabackup</code> 工具来进行物理备份。</p></li><li><p>逻辑备份：将数据库的结构对象及数据对象（所有的事件、触发器、存储过程等）转化为SQL语句后再保存到备份文件中，MySQL 中常用的逻辑备份工具为 <code>mysqldump</code>。</p></li></ul><p><strong>利用 <code>mysqldump</code> 进行数据备份</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 备份全部数据库</span></span>
<span class="line"><span style="color:#DCDCAA;">mysqldump</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-uroot</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-p</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--all-databases</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--routines</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--events</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--triggers</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--flush-logs</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--single-transaction</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--master-data=2</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#CE9178;">备份文件名.sql</span></span>
<span class="line"><span style="color:#6A9955;"># 备份指定数据库</span></span>
<span class="line"><span style="color:#DCDCAA;">mysqldump</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-uroot</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-p</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--databases</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">库名</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--routines</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--events</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--triggers</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--flush-logs</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--single-transaction</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--master-data=2</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#CE9178;">备份文件名.sql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：如果是保存到当前目录下，备份文件名可以直接写文件名，否则要写全路径</p></blockquote><ul><li><code>--all-databases</code>：备份所有数据库</li><li><code>--databases</code>：备份指定数据库</li><li><code>--routines</code>：备份存储过程和函数</li><li><code>--events</code>：备份事件</li><li><code>--triggers</code>：备份触发器</li><li><code>--flush-logs</code>：在备份开始时,刷新一个新 binlog 日志</li><li><code>--master-data=2</code>：以注释的形式，保存备份开始时间点的 binlog 的状态信息</li><li><code>--single-transaction</code>：和 <code>--master-data=2</code> 配合使用，对 <code>InnoDB</code> 表进行快照备份（热备）, 对非 <code>InnoDB</code> 表进行锁表备份</li></ul><p><strong>恢复数据</strong></p><p>基本语法为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">mysql</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-uroot</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-p</span><span style="color:#D4D4D4;"> [库名] &lt; 备份文件名.sql</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>想要恢复半个月前的数据，找到半个月前的数据备份，执行上述命令即可。</p>`,44),t=l("p",null,"参考文章：",-1),D={href:"https://www.qycn.com/xzx/article/5454.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://betheme.net/houduan/36852.html?action=onClick",target:"_blank",rel:"noopener noreferrer"},u=a('<h2 id="一条-sql-语句在-mysql-中的执行过程是怎样的" tabindex="-1"><a class="header-anchor" href="#一条-sql-语句在-mysql-中的执行过程是怎样的" aria-hidden="true">#</a> 一条 SQL 语句在 MySQL 中的执行过程是怎样的？</h2><ol><li><p>词法分析：根据 SQL 语句中的关键字判断是什么语句，此外还会识别出表名、字段名、查询条件等信息。</p></li><li><p>语法分析：根据词法分析的结果，语法分析器会将这条 SQL 语句解析成语法树，来判断该 SQL 语句是否符合 MySQL 语法。</p></li><li><p>优化：验证完语法后，会经过优化器确定它认为最优的执行方案（不一定是真正的最优），比如选择哪个索引、表关联时各表的连接顺序等。</p></li><li><p>执行：MySQL 根据优化后的方案调用引擎接口执行操作。</p></li><li><p>日志记录：如果是对数据库或数据进行更改的 SQL 语句，还会涉及到 binlog、redolog、undolog 日志。</p></li><li><p>返回结果：将结果返回给客户端，执行结束。</p></li></ol><h2 id="mysql-中的索引是怎么实现的-b-树是什么-b-树和-b-树的区别-为什么-mysql-要用-b-树" tabindex="-1"><a class="header-anchor" href="#mysql-中的索引是怎么实现的-b-树是什么-b-树和-b-树的区别-为什么-mysql-要用-b-树" aria-hidden="true">#</a> MySQL 中的索引是怎么实现的？B+ 树是什么，B 树和 B+ 树的区别，为什么 MySQL 要用 B+ 树？</h2><p>MySQL 中索引是基于 B+ 树实现的。</p><p>B+ 树是 B 树（多路平衡查找树）的变体，与 B 树的区别在于：</p><ul><li>B+ 树的所有数据会出现在叶子结点</li><li>B+ 树的叶子结点会有指针相连</li></ul><p>MySQL 使用 B+ 树的好处：</p><ul><li>B 树只适合随机检索，而 B+ 树同时支持随机检索和顺序检索</li><li>B 树的结点会存放数据，而 B+ 树的内部结点只是作为索引使用，空间利用率高，可以减少 I/O 次数，磁盘读写的代价更低</li><li>B+ 树的查询效率较稳定，随机检索时，都是从根结点到叶结点，路径相同，查询效率相当</li><li>B+ 树支持范围查询和排序操作</li></ul><h2 id="mysql-事务有哪些隔离级别、分别有什么特点-以及-mysql-的默认隔离级别是什么" tabindex="-1"><a class="header-anchor" href="#mysql-事务有哪些隔离级别、分别有什么特点-以及-mysql-的默认隔离级别是什么" aria-hidden="true">#</a> MySQL 事务有哪些隔离级别、分别有什么特点，以及 MySQL 的默认隔离级别是什么？</h2><p>MySQL 事务隔离级别：</p><table><thead><tr><th>事务隔离级别</th><th>描述</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读取未提交（READ-UNCOMMITTED）</td><td>允许一个事务读取另一个事务未提交的数据</td><td>√</td><td>√</td><td>√</td></tr><tr><td>读取已提交（READ-COMMITTED）</td><td>事务只能读取其他事务已提交的数据</td><td>×</td><td>√</td><td>√</td></tr><tr><td>可重复读（REPEATABLE-READ）</td><td>保证同一个事务多次读取同样的数据结果是一样的</td><td>×</td><td>×</td><td>√</td></tr><tr><td>可串行化（SERIALIZABLE）</td><td>事务串行执行</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><blockquote><p>注：<code>×</code> 代表不会发生，<code>√</code> 代表可能发生</p><ul><li>脏读：事务读取到其他事务未提交的修改数据，如果事务进行了回滚，原先读到的数据就是脏数据</li><li>不可重复读：在一个事务中，多次读取同一数据，如果中间有其他事务对该数据进行修改，就会导致读取的结果不一样</li><li>幻读：在一个事务中，读取到一组数据，如果有其他事务又插入了几条数据，再次读取时就会发现多了些原本不存在的数据</li></ul></blockquote><p>MySQL InnoDB 引擎默认隔离级别是 <strong>REPEATABLE-READ（可重复读）</strong>。</p><h2 id="意向锁是什么-有什么作用-它是表级锁还是行级锁" tabindex="-1"><a class="header-anchor" href="#意向锁是什么-有什么作用-它是表级锁还是行级锁" aria-hidden="true">#</a> 意向锁是什么？有什么作用？它是表级锁还是行级锁？</h2><p>意向锁是一种表级锁，用于协调行锁和表锁之间的关系，支持多粒度锁。当多个事务对同一张表加锁时，可以先使用意向锁进行协调，避免不同锁之间的冲突，从而提高数据库的并发处理能力和性能。意向锁分为两种：</p><ul><li>意向共享锁（IS 锁）：事务有意向对表中某行加共享锁，加共享锁前必须获得该表的 IS 锁。</li><li>意向排他锁（IX 锁）事务有意向对表中某行加排他锁，加排他锁前必须获得该表的 IX 锁。</li></ul><p><strong>意向锁之间是兼容的，不会和行级的共享锁和排他锁冲突，只会和表级锁冲突（除了 S 锁和 IS 锁兼容）。</strong></p>',17),h={href:"https://zhuanlan.zhihu.com/p/185003485",target:"_blank",rel:"noopener noreferrer"},b=a(`<h2 id="mvcc-是什么-innodb-是如何实现-mvcc-机制的" tabindex="-1"><a class="header-anchor" href="#mvcc-是什么-innodb-是如何实现-mvcc-机制的" aria-hidden="true">#</a> MVCC 是什么？InnoDB 是如何实现 MVCC 机制的？</h2><p>MVCC：多版本并发控制，指维护一个数据的多个版本，使得读写操作没有冲突，快照读为 MySQL 实现 MVCC 提供了一个非阻塞读功能。InnoDB 是根据<code>三个隐藏字段</code>、<code>undo log</code>、<code>ReadView</code> 来实现 MVCC 机制的。</p><ul><li><p><strong>三个隐藏字段</strong>：每行记录除了我们定义的字段外，数据库还会添加一些隐藏字段</p><ul><li><code>DB_TRX_ID</code>：最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务 ID</li><li><code>DB_ROLL_PTR</code>：回滚指针，指向这条记录的上一个版本，用于配合 undo log</li><li><code>DB_ROW_ID</code>：隐藏主键，如果表结构没有指定主键，就会生成该隐藏字段</li></ul></li><li><p><strong>undo log 版本链</strong>：不同事务或相同事务对同一条记录进行修改，会使该记录的 <code>undo log</code> 成为一条版本链表，链表头部是最新的旧记录，尾部是最早的旧记录。</p></li><li><p><strong>ReadView</strong>：事务进行快照读的时候生成的读视图，记录并维护系统当前活跃的事务 ID。包含四个核心字段</p><ul><li><code>m_ids</code>：当前活跃的事务 ID 集合</li><li><code>min_trx_id</code>：最小活跃事务 ID</li><li><code>max_trx_id</code>：预分配事务 ID，当前最大事务 ID + 1</li><li><code>creator_trx_id</code>：ReadView 创建者的事务 ID</li></ul></li></ul><p>具体实现：</p><ul><li>写/修改操作：当一个事务对某个数据行进行修改操作时，InnoDB 会将该数据行的旧版本存储到 <code>undo log</code> 中，并生成一个新版本，新版本的数据就是修改完的数据，<code>DB_TRX_ID</code> 存储当前事务的 ID，<code>DB_ROLL_PTR</code> 指向前面的旧版本</li><li>读操作：当事务进行读操作时，InnoDB 会根据生成的 <code>ReadView</code> 和数据行上的 <code>DB_TRX_ID</code> 来判断该数据是否可见，如不可见，就通过数据行上的 <code>DB_ROLL_PTR</code> 找到 <code>undo log</code> 中能够读取到的历史版本。判断是否可见的规则如下： <ol><li><code>DB_TRX_ID == creator_trx_id</code>，说明数据是当前事务更改的，可以访问该版本</li><li><code>DB_TRX_ID &lt; min_trx_id</code>，说明数据已提交，可以访问该版本</li><li><code>DB_TRX_ID &gt; max_trx_id</code>，说明修改该数据的事务是在 ReadView 生成后才开启，不可以访问</li><li><code>min_trx_id &lt;= DB_TRX_ID &lt;= max_trx_id</code>，如果 DB_TRX_ID 不在 m_ids，说明数据已提交，可以访问该版本，否则不可以访问</li></ol></li></ul><blockquote><p>在 RC（READ-COMMITTED）隔离级别下，每次执行快照读都会生成一个新的 ReadView；</p><p>在 RR（REPEATABLE-READ）隔离级别下，第一次执行快照读时生成 ReadView，后面都是复用该 ReadView</p></blockquote><h2 id="覆盖索引和联合索引是什么-讲一下索引的最左前缀匹配原则" tabindex="-1"><a class="header-anchor" href="#覆盖索引和联合索引是什么-讲一下索引的最左前缀匹配原则" aria-hidden="true">#</a> 覆盖索引和联合索引是什么？讲一下索引的最左前缀匹配原则</h2><p>覆盖索引：索引中包含了所有需要查询的列，不需要回表查询</p><p>联合索引：多个字段组合成的索引，可以同时根据这些字段查询，也可以只使用一部分字段查询，但需要遵循最左前缀匹配原则</p><p>最左前缀匹配原则：使用联合索引进行查询时，会根据索引最左边的字段开始匹配，如果查询条件中没有该字段，就不会使用该联合索引；存在则继续向右匹配，中间如果跳过索引中的某一列或遇到范围查询（&gt;，&lt;，between，like），后面的字段索引会失效</p><h2 id="什么是-mysql-执行计划-如何获取执行计划并对其进行分析" tabindex="-1"><a class="header-anchor" href="#什么是-mysql-执行计划-如何获取执行计划并对其进行分析" aria-hidden="true">#</a> 什么是 MySQL 执行计划？如何获取执行计划并对其进行分析？</h2><p>MySQL 执行计划是 MySQL 查询优化器分析 SQL 查询时生成的一份详细计划，包括表如何连接、是否走索引、表扫描行数等。通过这份执行计划，我们可以分析这条 SQL 查询中存在的问题（如是否出现全表扫描），从而进行针对优化。</p><p>MySQL 中可以在 SQL 语句的前面加上 <code>explain</code> 命令来获取执行计划，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">mysql&gt; explain </span><span style="color:#569CD6;">select</span><span style="color:#D4D4D4;"> * </span><span style="color:#569CD6;">from</span><span style="color:#D4D4D4;"> t_user </span><span style="color:#569CD6;">where</span><span style="color:#D4D4D4;"> id = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">+</span><span style="color:#6A9955;">----+-------------+--------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span>
<span class="line"><span style="color:#D4D4D4;">| id | select_type | </span><span style="color:#569CD6;">table</span><span style="color:#D4D4D4;">  | partitions | </span><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;">  | possible_keys | </span><span style="color:#569CD6;">key</span><span style="color:#D4D4D4;">     | key_len | ref   | </span><span style="color:#569CD6;">rows</span><span style="color:#D4D4D4;"> | filtered | Extra |</span></span>
<span class="line"><span style="color:#D4D4D4;">+</span><span style="color:#6A9955;">----+-------------+--------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span>
<span class="line"><span style="color:#D4D4D4;">|  </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> | </span><span style="color:#569CD6;">SIMPLE</span><span style="color:#D4D4D4;">      | t_user | </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;">       | const | </span><span style="color:#569CD6;">PRIMARY</span><span style="color:#D4D4D4;">       | </span><span style="color:#569CD6;">PRIMARY</span><span style="color:#D4D4D4;"> | </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">       | const |    </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;"> |   </span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">.</span><span style="color:#B5CEA8;">00</span><span style="color:#D4D4D4;"> | </span><span style="color:#569CD6;">NULL</span><span style="color:#D4D4D4;">  |</span></span>
<span class="line"><span style="color:#D4D4D4;">+</span><span style="color:#6A9955;">----+-------------+--------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，各字段的含义如下：</p><ul><li>id：SELECT 查询的序列号，表示执行 select 子句的顺序（id 相同，执行顺序从上到下；id 不同，值越大越先执行；如果是并集结果，则 id 值可以为 NULL）</li><li>select_type：查询类型，来区分简单查询、联合查询、子查询等。常见的类型有： <ul><li>SIMPLE：简单查询，不包含表连接或子查询</li><li>PRIMARY：主查询，外层的查询</li><li>SUBQUERY：子查询中第一个 SELECT</li><li>UNION：UNION 后面的 SELECT 查询语句</li><li>UNION RESULT：UNION 合并的结果</li></ul></li><li>table：查询用到的表名</li><li>partitions：匹配的分区，没有分区的表为 NULL</li><li>type ★：连接的类型，常见的类型有（性能从好到差）： <ul><li>system：存储引擎能够直接知道表的行数（如 MyISAM）并且只有一行数据</li><li>const：通过索引一次找到，通常在用主键或唯一索引时出现</li><li>eq_ref：用主键或唯一索引字段作为连接表条件</li><li>ref：用普通索引的字段作为连接表条件</li><li>range：对索引列进行范围查询</li><li>index：利用索引扫描全表</li><li>all：全表扫描</li></ul></li><li>possible_keys：可能用到的索引</li><li>key ★：实际使用的索引，没有使用为 NULL</li><li>key_len ★：索引字段的最大长度，在满足需求下越短越好</li><li>ref：当使用索引等值查询时，与索引作比较的列或常量</li><li>rows：预计扫描的行数，值越大，查询性能越差</li><li>filtered：表示返回结果的行数占需读取行数的百分比</li><li>Extra ★：有关查询执行的其他信息 <ul><li>using index：使用覆盖索引，不用回表查询</li><li>using where：使用 where 子句来过滤结果集</li><li>using temporary：使用到临时表来存储中间结果，可能会导致性能问题</li><li>using filesort：查询需要进行文件排序操作，可能会导致性能问题</li><li>using index condition：先根据能用索引的条件获取符合条件的数据行，然后在根据其他条件去过滤数据</li></ul></li></ul><blockquote><p>带 ★ 是需要重点关注的字段</p><ul><li>通过 key 和 key_len 检查是否命中了索引，即索引是否失效</li><li>通过 type 字段查看 SQL 是否有优化空间，是否存在全索引扫描和全表扫描</li><li>通过 extra 字段判断是否出现回表等情况</li></ul></blockquote><h2 id="mysql-支持哪些存储引擎-默认使用哪个-myisam-和-innodb-引擎有什么区别-如何选择" tabindex="-1"><a class="header-anchor" href="#mysql-支持哪些存储引擎-默认使用哪个-myisam-和-innodb-引擎有什么区别-如何选择" aria-hidden="true">#</a> MySQL 支持哪些存储引擎？默认使用哪个？MyISAM 和 InnoDB 引擎有什么区别，如何选择？</h2><p>可以通过 <code>show engines</code> 来查看 MySQL 支持的所有存储引擎，常见的有：InnoDB、MyISAM、Memory、Archive 等。MySQL 5.5 及以上版本默认使用的是 InnoDB。</p><p>MyISAM 和 InnoDB 之间的区别：</p><ul><li><p>锁支持：MyISAM 只支持表级锁，进行写操作时会锁住整张表；InnoDB 支持表级锁和行级锁，默认为行锁，只对要操作的行上锁，在并发写上 InnoDB 性能更好</p></li><li><p>事务支持：MyISAM 不支持事务；InnoDB 支持事务，具备事务的 ACID 特性</p></li><li><p>外键支持：MyISAM 不支持外键约束；InnoDB 支持外键约束</p></li><li><p>数据恢复：MyISAM 在数据库发生异常崩溃时，可能会导致数据损坏或丢失；InnoDB 在数据库崩溃后，重新启动时能根据 <code>redo log</code> 恢复数据</p></li></ul><p>选择存储引擎应该根据它们各自的特点，结合应用场景和需求来确定，比如：</p><ul><li>对于需要事务处理，提供崩溃恢复，可以使用 InnoDB，它能保证数据的完整性和一致性</li><li>对于主要用于插入和查询记录的数据表，可以使用 MyISAM，它具备快速查询和插入数据的能力</li><li>对于作为缓存数据或临时表的场景，可以使用 Memory，它是将表存储在内存中，提供快速插入和查询功能</li><li>对于归档数据，可以使用 Archive，它支持快速插入和检索大量数据，但不支持更新和删除操作</li></ul><h2 id="mysql-如何定位慢查询" tabindex="-1"><a class="header-anchor" href="#mysql-如何定位慢查询" aria-hidden="true">#</a> MySQL 如何定位慢查询？</h2><p>通常情况下，慢查询主要出现在<strong>聚合查询</strong>、<strong>多表查询</strong>、<strong>表数据量过大的查询</strong>、<strong>深度分页查询</strong>中。表现形式为页面加载过慢、接口压测响应时间过长（超过 1 s）。</p><p>如何定位慢查询？</p><p><strong>方案一：开源工具</strong></p><ul><li>调试工具：Arthas，以命令的方式去监控已上线的项目，跟踪执行比较慢的方法，查看方法的执行时间，从而确定哪里出现问题</li><li>运维工具：Prometheus、Skywalking（可以实时查看接口的响应情况，并可以追踪接口各阶段的耗时情况）</li></ul><p><strong>方案二：MySQL 自带慢查询日志</strong></p><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认为 10 s）的 SQL 语句。</p><p>如果要开启慢查询日志，需要在 MySQL 的配置文件 <code>/etc/my.cnf</code> 中配置：</p><div class="language-ini line-numbers-mode" data-ext="ini"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 开启MySQL慢日志查询开关</span></span>
<span class="line"><span style="color:#569CD6;">slow_query_log</span><span style="color:#D4D4D4;">=1</span></span>
<span class="line"><span style="color:#6A9955;"># 设置当SQL语句执行时间超过2秒，就会视为慢查询，记录到慢查询日志中</span></span>
<span class="line"><span style="color:#569CD6;">long_query_time</span><span style="color:#D4D4D4;">=2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>慢查询日志一般在调试阶段开启，而不在生产环境中使用，因为会损耗 MySQL 的一些性能。</p></blockquote><h2 id="什么是聚簇索引和非聚簇索引-什么是回表查询" tabindex="-1"><a class="header-anchor" href="#什么是聚簇索引和非聚簇索引-什么是回表查询" aria-hidden="true">#</a> 什么是聚簇索引和非聚簇索引？什么是回表查询？</h2><p>聚簇索引（聚集索引）：将数据和索引存储在一起，B+ 树的叶子节点保存了整行数据，有且只能有一个。</p><p>聚集索引的选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，选取第一个唯一索引作为聚集索引</li><li>如果不存在唯一索引，InnoDB 会自动生成一个 rowid 作为聚集索引</li></ul><p>非聚簇索引（二级索引）：将数据和索引分开存储，B+ 树的叶子节点保存对应的主键，可以有多个。一般自己创建的索引就是非聚簇索引。</p><p>回表查询：通过二级索引找到对应主键值，再到聚集索引中找到整行数据，这个过程就是回表。</p><h2 id="mysql-如何处理超大分页" tabindex="-1"><a class="header-anchor" href="#mysql-如何处理超大分页" aria-hidden="true">#</a> MySQL 如何处理超大分页？</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">select</span><span style="color:#D4D4D4;"> * </span><span style="color:#569CD6;">from</span><span style="color:#D4D4D4;"> tb_test </span><span style="color:#569CD6;">limit</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">9000000</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于上面的 SQL 语句，MySQL 需要先排序前 9000010 条记录，然后仅仅取 9000000~9000010 的记录，其他记录丢弃，这种情况查询排序的代价非常大。</p><p>优化思路：通过<strong>覆盖索引</strong>和<strong>子查询</strong>进行优化</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">select</span><span style="color:#D4D4D4;"> *</span></span>
<span class="line"><span style="color:#569CD6;">from</span><span style="color:#D4D4D4;"> tb_test </span><span style="color:#569CD6;">as</span><span style="color:#D4D4D4;"> t1, (</span><span style="color:#569CD6;">select</span><span style="color:#D4D4D4;"> id </span><span style="color:#569CD6;">from</span><span style="color:#D4D4D4;"> tb_test </span><span style="color:#569CD6;">order by</span><span style="color:#D4D4D4;"> id </span><span style="color:#569CD6;">limit</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">9000000</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">as</span><span style="color:#D4D4D4;"> t2</span></span>
<span class="line"><span style="color:#569CD6;">where</span><span style="color:#D4D4D4;"> t1.id = t2.id</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么情况索引会失效" tabindex="-1"><a class="header-anchor" href="#什么情况索引会失效" aria-hidden="true">#</a> 什么情况索引会失效？</h2><ol><li><p>违背最左前缀匹配原则</p><p>使用联合索引进行查询时，如果跳过索引中的某一列或遇到范围查询（&gt;，&lt;，between，like），后面的字段索引会失效</p></li><li><p>在索引列进行运算操作，索引会失效</p></li><li><p>字符串类型使用时不加单引号，索引会失效</p><p>在查询时，由于没有加单引号，MySQL 查询优化器会自动进行类型转换，导致索引失效</p></li><li><p>以 % 开头的 like 模糊查询，索引失效。如果仅仅是尾部模糊匹配，索引不会失效</p></li><li><p>or 连接的条件，一侧有索引，一侧没索引，涉及的索引不会被使用</p></li><li><p>数据分布影响：如果 MySQL 评估使用索引比全表更慢，则不使用索引</p></li></ol><h2 id="mysql-主从复制原理" tabindex="-1"><a class="header-anchor" href="#mysql-主从复制原理" aria-hidden="true">#</a> MySQL 主从复制原理</h2><p>MySQL 主从复制的核心是 binlog 二进制日志，它记录了所有的 DDL（数据定义语言）和 DML（数据操纵语言）语句。</p><ol><li>主库在事务提交时，会把数据的变革记录在 binlog 日志中</li><li>从库会读取主库的 binlog 日志，写入到从库的中继日志 relay log</li><li>从库重做中继日志的事件，将改变写入到本库中</li></ol>`,49);function m(g,v){const s=c("ExternalLinkIcon");return i(),p("div",null,[r,l("blockquote",null,[t,l("ul",null,[l("li",null,[l("a",D,[e("https://www.qycn.com/xzx/article/5454.html"),n(s)])]),l("li",null,[l("a",y,[e("https://betheme.net/houduan/36852.html?action=onClick"),n(s)])])])]),u,l("blockquote",null,[l("p",null,[l("a",h,[e("详解 MySql InnoDB 中意向锁的作用"),n(s)])])]),b])}const C=o(d,[["render",m],["__file","MySQL.html.vue"]]);export{C as default};
